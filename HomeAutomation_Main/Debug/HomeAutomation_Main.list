
HomeAutomation_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a80  08006a80  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a88  08006a88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a4c  20000074  08006b04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ac0  08006b04  00024ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014616  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f77  00000000  00000000  000346ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00037638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00038658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dd4  00000000  00000000  00039560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012956  00000000  00000000  0003d334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000958a8  00000000  00000000  0004fc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000461c  00000000  00000000  000e5584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800693c 	.word	0x0800693c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800693c 	.word	0x0800693c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb64 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f836 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f926 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f8fa 	bl	800078c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000598:	f000 f89e 	bl	80006d8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f002 ffda 	bl	8003554 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DateAndTime */
  DateAndTimeHandle = osThreadNew(StartDefaultTask, NULL, &DateAndTime_attributes);
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <main+0x54>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x58>)
 80005a6:	f003 f81f 	bl	80035e8 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <main+0x5c>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of WifiControlsign */
  WifiControlsignHandle = osThreadNew(StartTask02, NULL, &WifiControlsign_attributes);
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <main+0x60>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <main+0x64>)
 80005b6:	f003 f817 	bl	80035e8 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <main+0x68>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of LightsFollowAlo */
  LightsFollowAloHandle = osThreadNew(StartTask03, NULL, &LightsFollowAlo_attributes);
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <main+0x6c>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <main+0x70>)
 80005c6:	f003 f80f 	bl	80035e8 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <main+0x74>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f002 ffe4 	bl	800359c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x50>
 80005d6:	bf00      	nop
 80005d8:	080069c8 	.word	0x080069c8
 80005dc:	080008a1 	.word	0x080008a1
 80005e0:	2000014c 	.word	0x2000014c
 80005e4:	080069ec 	.word	0x080069ec
 80005e8:	0800093d 	.word	0x0800093d
 80005ec:	20000150 	.word	0x20000150
 80005f0:	08006a10 	.word	0x08006a10
 80005f4:	08000955 	.word	0x08000955
 80005f8:	20000154 	.word	0x20000154

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fd2e 	bl	800606c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <SystemClock_Config+0xd4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xd4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <SystemClock_Config+0xd8>)
 800064a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <SystemClock_Config+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800065c:	230a      	movs	r3, #10
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fe96 	bl	80013bc <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 f98f 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f8f8 	bl	80018ac <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006c2:	f000 f979 	bl	80009b8 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_RTC_Init+0xac>)
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_RTC_Init+0xb0>)
 80006f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_RTC_Init+0xac>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_RTC_Init+0xac>)
 80006fe:	227f      	movs	r2, #127	; 0x7f
 8000700:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_RTC_Init+0xac>)
 8000704:	22ff      	movs	r2, #255	; 0xff
 8000706:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_RTC_Init+0xac>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_RTC_Init+0xac>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_RTC_Init+0xac>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800071a:	481a      	ldr	r0, [pc, #104]	; (8000784 <MX_RTC_Init+0xac>)
 800071c:	f001 fbd4 	bl	8001ec8 <HAL_RTC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000726:	f000 f947 	bl	80009b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800072a:	2300      	movs	r3, #0
 800072c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800072e:	2300      	movs	r3, #0
 8000730:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000732:	2300      	movs	r3, #0
 8000734:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <MX_RTC_Init+0xac>)
 8000746:	f001 fc35 	bl	8001fb4 <HAL_RTC_SetTime>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000750:	f000 f932 	bl	80009b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000754:	2301      	movs	r3, #1
 8000756:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000758:	2301      	movs	r3, #1
 800075a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800075c:	2301      	movs	r3, #1
 800075e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000760:	2300      	movs	r3, #0
 8000762:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_RTC_Init+0xac>)
 800076c:	f001 fd1a 	bl	80021a4 <HAL_RTC_SetDate>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000776:	f000 f91f 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000e8 	.word	0x200000e8
 8000788:	40002800 	.word	0x40002800

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f001 fe7e 	bl	80024c4 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f8f3 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000108 	.word	0x20000108
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_GPIO_Init+0xb8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a26      	ldr	r2, [pc, #152]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <MX_GPIO_Init+0xb8>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_GPIO_Init+0xb8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 618c 	mov.w	r1, #1120	; 0x460
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0xbc>)
 800086e:	f000 fd8b 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin PA6 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_10;
 8000872:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xbc>)
 800088c:	f000 fbf8 	bl	8001080 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000

080008a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008a8:	2200      	movs	r2, #0
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <StartDefaultTask+0x7c>)
 80008ac:	481c      	ldr	r0, [pc, #112]	; (8000920 <StartDefaultTask+0x80>)
 80008ae:	f001 fcfd 	bl	80022ac <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008b2:	2200      	movs	r2, #0
 80008b4:	491b      	ldr	r1, [pc, #108]	; (8000924 <StartDefaultTask+0x84>)
 80008b6:	481a      	ldr	r0, [pc, #104]	; (8000920 <StartDefaultTask+0x80>)
 80008b8:	f001 fc16 	bl	80020e8 <HAL_RTC_GetTime>
	  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <StartDefaultTask+0x7c>)
 80008be:	789b      	ldrb	r3, [r3, #2]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <StartDefaultTask+0x7c>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <StartDefaultTask+0x7c>)
 80008ca:	78db      	ldrb	r3, [r3, #3]
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	460b      	mov	r3, r1
 80008d0:	4915      	ldr	r1, [pc, #84]	; (8000928 <StartDefaultTask+0x88>)
 80008d2:	4816      	ldr	r0, [pc, #88]	; (800092c <StartDefaultTask+0x8c>)
 80008d4:	f005 fbd2 	bl	800607c <siprintf>
	  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <StartDefaultTask+0x84>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <StartDefaultTask+0x84>)
 80008e0:	785b      	ldrb	r3, [r3, #1]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <StartDefaultTask+0x84>)
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	460b      	mov	r3, r1
 80008ec:	4910      	ldr	r1, [pc, #64]	; (8000930 <StartDefaultTask+0x90>)
 80008ee:	4811      	ldr	r0, [pc, #68]	; (8000934 <StartDefaultTask+0x94>)
 80008f0:	f005 fbc4 	bl	800607c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)date, sizeof(date),300);
 80008f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008f8:	221e      	movs	r2, #30
 80008fa:	490c      	ldr	r1, [pc, #48]	; (800092c <StartDefaultTask+0x8c>)
 80008fc:	480e      	ldr	r0, [pc, #56]	; (8000938 <StartDefaultTask+0x98>)
 80008fe:	f001 fe2e 	bl	800255e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)time, sizeof(time),300);
 8000902:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000906:	221e      	movs	r2, #30
 8000908:	490a      	ldr	r1, [pc, #40]	; (8000934 <StartDefaultTask+0x94>)
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <StartDefaultTask+0x98>)
 800090c:	f001 fe27 	bl	800255e <HAL_UART_Transmit>
	  osDelay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000914:	f002 fefa 	bl	800370c <osDelay>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000918:	e7c6      	b.n	80008a8 <StartDefaultTask+0x8>
 800091a:	bf00      	nop
 800091c:	200000e4 	.word	0x200000e4
 8000920:	200000e8 	.word	0x200000e8
 8000924:	200000d0 	.word	0x200000d0
 8000928:	08006980 	.word	0x08006980
 800092c:	200000b0 	.word	0x200000b0
 8000930:	08006998 	.word	0x08006998
 8000934:	20000090 	.word	0x20000090
 8000938:	20000108 	.word	0x20000108

0800093c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2108      	movs	r1, #8
 8000948:	4801      	ldr	r0, [pc, #4]	; (8000950 <StartTask02+0x14>)
 800094a:	f000 fd1d 	bl	8001388 <HAL_GPIO_WritePin>
 800094e:	e7f9      	b.n	8000944 <StartTask02+0x8>
 8000950:	40020000 	.word	0x40020000

08000954 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(RoomNo==0){
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <StartTask03+0x5c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d112      	bne.n	800098a <StartTask03+0x36>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2120      	movs	r1, #32
 8000968:	4812      	ldr	r0, [pc, #72]	; (80009b4 <StartTask03+0x60>)
 800096a:	f000 fd0d 	bl	8001388 <HAL_GPIO_WritePin>
	  osDelay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000972:	f002 fecb 	bl	800370c <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <StartTask03+0x60>)
 800097c:	f000 fd04 	bl	8001388 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000984:	f002 fec2 	bl	800370c <osDelay>
 8000988:	e7e8      	b.n	800095c <StartTask03+0x8>
	  }
	  else{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <StartTask03+0x60>)
 8000990:	f000 fcfa 	bl	8001388 <HAL_GPIO_WritePin>
	  osDelay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000998:	f002 feb8 	bl	800370c <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <StartTask03+0x60>)
 80009a2:	f000 fcf1 	bl	8001388 <HAL_GPIO_WritePin>
	  osDelay(2000);
 80009a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009aa:	f002 feaf 	bl	800370c <osDelay>
	  if(RoomNo==0){
 80009ae:	e7d5      	b.n	800095c <StartTask03+0x8>
 80009b0:	200000ce 	.word	0x200000ce
 80009b4:	40020000 	.word	0x40020000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <HAL_MspInit+0x54>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x54>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_MspInit+0x54>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_MspInit+0x54>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	210f      	movs	r1, #15
 8000a06:	f06f 0001 	mvn.w	r0, #1
 8000a0a:	f000 fa70 	bl	8000eee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <HAL_RTC_MspInit+0x50>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d111      	bne.n	8000a62 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a46:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 f94d 	bl	8001cec <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000a58:	f7ff ffae 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <HAL_RTC_MspInit+0x54>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40002800 	.word	0x40002800
 8000a70:	42470e3c 	.word	0x42470e3c

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_UART_MspInit+0x94>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d133      	bne.n	8000afe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_UART_MspInit+0x9c>)
 8000aea:	f000 fac9 	bl	8001080 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2105      	movs	r1, #5
 8000af2:	2026      	movs	r0, #38	; 0x26
 8000af4:	f000 f9fb 	bl	8000eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000af8:	2026      	movs	r0, #38	; 0x26
 8000afa:	f000 fa14 	bl	8000f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f8d8 	bl	8000cf8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b48:	f004 f9ee 	bl	8004f28 <xTaskGetSchedulerState>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d001      	beq.n	8000b56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b52:	f004 ffd9 	bl	8005b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <USART2_IRQHandler+0x10>)
 8000b62:	f001 fd8f 	bl	8002684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000108 	.word	0x20000108

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f005 fa2c 	bl	8005ffc <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20018000 	.word	0x20018000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000158 	.word	0x20000158
 8000bd8:	20004ac0 	.word	0x20004ac0

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f005 f9eb 	bl	8006008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fca7 	bl	8000584 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c44:	08006a90 	.word	0x08006a90
  ldr r2, =_sbss
 8000c48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c4c:	20004ac0 	.word	0x20004ac0

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f92b 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe9c 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f943 	bl	8000f42 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f90b 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	2000015c 	.word	0x2000015c

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2000015c 	.word	0x2000015c

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff29 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff3e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff31 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffa2 	bl	8000e94 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff feda 	bl	8000d20 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d008      	beq.n	8000f8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e052      	b.n	8001032 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0216 	bic.w	r2, r2, #22
 8000f9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000faa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d103      	bne.n	8000fbc <HAL_DMA_Abort+0x62>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0208 	bic.w	r2, r2, #8
 8000fca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fdc:	e013      	b.n	8001006 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fde:	f7ff fe9f 	bl	8000d20 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d90c      	bls.n	8001006 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2220      	movs	r2, #32
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e015      	b.n	8001032 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e4      	bne.n	8000fde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001018:	223f      	movs	r2, #63	; 0x3f
 800101a:	409a      	lsls	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d004      	beq.n	8001058 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e00c      	b.n	8001072 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2205      	movs	r2, #5
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e159      	b.n	8001350 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8148 	bne.w	800134a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80a2 	beq.w	800134a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b57      	ldr	r3, [pc, #348]	; (8001368 <HAL_GPIO_Init+0x2e8>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a56      	ldr	r2, [pc, #344]	; (8001368 <HAL_GPIO_Init+0x2e8>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b54      	ldr	r3, [pc, #336]	; (8001368 <HAL_GPIO_Init+0x2e8>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_GPIO_Init+0x2ec>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a49      	ldr	r2, [pc, #292]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x202>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_GPIO_Init+0x2f4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x1fe>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a47      	ldr	r2, [pc, #284]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x1fa>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a46      	ldr	r2, [pc, #280]	; (800137c <HAL_GPIO_Init+0x2fc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x1f6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a45      	ldr	r2, [pc, #276]	; (8001380 <HAL_GPIO_Init+0x300>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x1f2>
 800126e:	2304      	movs	r3, #4
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x204>
 8001272:	2307      	movs	r3, #7
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x204>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x204>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x204>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x204>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	; (800136c <HAL_GPIO_Init+0x2ec>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <HAL_GPIO_Init+0x304>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <HAL_GPIO_Init+0x304>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <HAL_GPIO_Init+0x304>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a24      	ldr	r2, [pc, #144]	; (8001384 <HAL_GPIO_Init+0x304>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <HAL_GPIO_Init+0x304>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_GPIO_Init+0x304>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_GPIO_Init+0x304>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_GPIO_Init+0x304>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f aea2 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e267      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d075      	beq.n	80014c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d00c      	beq.n	8001400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4b85      	ldr	r3, [pc, #532]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013fe:	d10b      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4b7e      	ldr	r3, [pc, #504]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d05b      	beq.n	80014c4 <HAL_RCC_OscConfig+0x108>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d157      	bne.n	80014c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e242      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x74>
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a75      	ldr	r2, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x98>
 800143a:	4b70      	ldr	r3, [pc, #448]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6f      	ldr	r2, [pc, #444]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6c      	ldr	r2, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001454:	4b69      	ldr	r3, [pc, #420]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a68      	ldr	r2, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fc54 	bl	8000d20 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fc50 	bl	8000d20 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e207      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xc0>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fc40 	bl	8000d20 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc3c 	bl	8000d20 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1f3      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0xe8>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ea:	4b44      	ldr	r3, [pc, #272]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1c7      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4937      	ldr	r1, [pc, #220]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e03a      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x244>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fbf5 	bl	8000d20 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fbf1 	bl	8000d20 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1a8      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4925      	ldr	r1, [pc, #148]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_RCC_OscConfig+0x244>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fbd4 	bl	8000d20 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fbd0 	bl	8000d20 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e187      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d036      	beq.n	8001614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d016      	beq.n	80015dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_RCC_OscConfig+0x248>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fbb4 	bl	8000d20 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fbb0 	bl	8000d20 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e167      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80015d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x200>
 80015da:	e01b      	b.n	8001614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_OscConfig+0x248>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb9d 	bl	8000d20 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	e00e      	b.n	8001608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb99 	bl	8000d20 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d907      	bls.n	8001608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e150      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
 80015fc:	40023800 	.word	0x40023800
 8001600:	42470000 	.word	0x42470000
 8001604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800160a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ea      	bne.n	80015ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 8097 	beq.w	8001750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10f      	bne.n	8001652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b7d      	ldr	r3, [pc, #500]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a7c      	ldr	r2, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b7a      	ldr	r3, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164e:	2301      	movs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	4b77      	ldr	r3, [pc, #476]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d118      	bne.n	8001690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165e:	4b74      	ldr	r3, [pc, #464]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a73      	ldr	r2, [pc, #460]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff fb59 	bl	8000d20 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001672:	f7ff fb55 	bl	8000d20 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e10c      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2ea>
 8001698:	4b64      	ldr	r3, [pc, #400]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169c:	4a63      	ldr	r2, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6713      	str	r3, [r2, #112]	; 0x70
 80016a4:	e01c      	b.n	80016e0 <HAL_RCC_OscConfig+0x324>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x30c>
 80016ae:	4b5f      	ldr	r3, [pc, #380]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a5e      	ldr	r2, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a5b      	ldr	r2, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0x324>
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a57      	ldr	r2, [pc, #348]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d8:	4a54      	ldr	r2, [pc, #336]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 0304 	bic.w	r3, r3, #4
 80016de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d015      	beq.n	8001714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fb1a 	bl	8000d20 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff fb16 	bl	8000d20 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0cb      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001706:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ee      	beq.n	80016f0 <HAL_RCC_OscConfig+0x334>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff fb04 	bl	8000d20 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7ff fb00 	bl	8000d20 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0b5      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001732:	4b3e      	ldr	r3, [pc, #248]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ee      	bne.n	800171c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800173e:	7dfb      	ldrb	r3, [r7, #23]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d105      	bne.n	8001750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a38      	ldr	r2, [pc, #224]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a1 	beq.w	800189c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b08      	cmp	r3, #8
 8001764:	d05c      	beq.n	8001820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d141      	bne.n	80017f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_RCC_OscConfig+0x478>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fad4 	bl	8000d20 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fad0 	bl	8000d20 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e087      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	491b      	ldr	r1, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x478>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff faa9 	bl	8000d20 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff faa5 	bl	8000d20 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e05c      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x416>
 80017f0:	e054      	b.n	800189c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_RCC_OscConfig+0x478>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa92 	bl	8000d20 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fa8e 	bl	8000d20 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e045      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x444>
 800181e:	e03d      	b.n	800189c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e038      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000
 8001834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x4ec>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d028      	beq.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d121      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d11a      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001868:	4013      	ands	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800186e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001870:	4293      	cmp	r3, r2
 8001872:	d111      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	3b01      	subs	r3, #1
 8001882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0cc      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d90c      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d044      	beq.n	80019cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001966:	2b03      	cmp	r3, #3
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e067      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff f9c0 	bl	8000d20 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff f9bc 	bl	8000d20 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e04f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d20c      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 f821 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f920 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	08006a34 	.word	0x08006a34
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a7c:	b094      	sub	sp, #80	; 0x50
 8001a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
 8001a84:	2300      	movs	r3, #0
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a88:	2300      	movs	r3, #0
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a90:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	f200 80e1 	bhi.w	8001c64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x34>
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aaa:	e0db      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ab0:	e0db      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab2:	4b73      	ldr	r3, [pc, #460]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab6:	e0d8      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d063      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aea:	4622      	mov	r2, r4
 8001aec:	462b      	mov	r3, r5
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	0159      	lsls	r1, r3, #5
 8001af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afc:	0150      	lsls	r0, r2, #5
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4621      	mov	r1, r4
 8001b04:	1a51      	subs	r1, r2, r1
 8001b06:	6139      	str	r1, [r7, #16]
 8001b08:	4629      	mov	r1, r5
 8001b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	4651      	mov	r1, sl
 8001b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b26:	4651      	mov	r1, sl
 8001b28:	018a      	lsls	r2, r1, #6
 8001b2a:	4651      	mov	r1, sl
 8001b2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b30:	4659      	mov	r1, fp
 8001b32:	eb63 0901 	sbc.w	r9, r3, r1
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	eb18 0303 	adds.w	r3, r8, r3
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	462b      	mov	r3, r5
 8001b58:	eb49 0303 	adc.w	r3, r9, r3
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	024b      	lsls	r3, r1, #9
 8001b6e:	4621      	mov	r1, r4
 8001b70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b74:	4621      	mov	r1, r4
 8001b76:	024a      	lsls	r2, r1, #9
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b88:	f7fe fb7a 	bl	8000280 <__aeabi_uldivmod>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4613      	mov	r3, r2
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b94:	e058      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	099b      	lsrs	r3, r3, #6
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	f04f 0000 	mov.w	r0, #0
 8001bb8:	f04f 0100 	mov.w	r1, #0
 8001bbc:	0159      	lsls	r1, r3, #5
 8001bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc2:	0150      	lsls	r0, r2, #5
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4641      	mov	r1, r8
 8001bca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bce:	4649      	mov	r1, r9
 8001bd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001be0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001be4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bec:	eb63 050b 	sbc.w	r5, r3, fp
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	00eb      	lsls	r3, r5, #3
 8001bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bfe:	00e2      	lsls	r2, r4, #3
 8001c00:	4614      	mov	r4, r2
 8001c02:	461d      	mov	r5, r3
 8001c04:	4643      	mov	r3, r8
 8001c06:	18e3      	adds	r3, r4, r3
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	eb45 0303 	adc.w	r3, r5, r3
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	028b      	lsls	r3, r1, #10
 8001c22:	4621      	mov	r1, r4
 8001c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c28:	4621      	mov	r1, r4
 8001c2a:	028a      	lsls	r2, r1, #10
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c32:	2200      	movs	r2, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	61fa      	str	r2, [r7, #28]
 8001c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c3c:	f7fe fb20 	bl	8000280 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	3301      	adds	r3, #1
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c62:	e002      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3750      	adds	r7, #80	; 0x50
 8001c70:	46bd      	mov	sp, r7
 8001c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a9b      	lsrs	r3, r3, #10
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	08006a44 	.word	0x08006a44

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffdc 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0b5b      	lsrs	r3, r3, #13
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	08006a44 	.word	0x08006a44

08001cec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d035      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d1a:	f7ff f801 	bl	8000d20 <HAL_GetTick>
 8001d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d22:	f7fe fffd 	bl	8000d20 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0ba      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d34:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	019a      	lsls	r2, r3, #6
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	071b      	lsls	r3, r3, #28
 8001d4c:	495a      	ldr	r1, [pc, #360]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d54:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d5a:	f7fe ffe1 	bl	8000d20 <HAL_GetTick>
 8001d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d62:	f7fe ffdd 	bl	8000d20 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e09a      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8083 	beq.w	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001daa:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a43      	ldr	r2, [pc, #268]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001db6:	f7fe ffb3 	bl	8000d20 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7fe ffaf 	bl	8000d20 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e06c      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02f      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d028      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e10:	4a29      	ldr	r2, [pc, #164]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e16:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d114      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e22:	f7fe ff7d 	bl	8000d20 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe ff79 	bl	8000d20 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e034      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e6e:	4912      	ldr	r1, [pc, #72]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
 8001e74:	e005      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e80:	6093      	str	r3, [r2, #8]
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8e:	490a      	ldr	r1, [pc, #40]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7c1a      	ldrb	r2, [r3, #16]
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ea6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	42470068 	.word	0x42470068
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	42470e40 	.word	0x42470e40
 8001ec4:	424711e0 	.word	0x424711e0

08001ec8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e066      	b.n	8001fac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7f5b      	ldrb	r3, [r3, #29]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fd94 	bl	8000a1c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	22ca      	movs	r2, #202	; 0xca
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2253      	movs	r2, #83	; 0x53
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa45 	bl	800239a <RTC_EnterInitMode>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d12c      	bne.n	8001f74 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68d2      	ldr	r2, [r2, #12]
 8001f54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fa4c 	bl	8002408 <RTC_ExitInitMode>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	7f1b      	ldrb	r3, [r3, #28]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_RTC_SetTime+0x1c>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e087      	b.n	80020e0 <HAL_RTC_SetTime+0x12c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d126      	bne.n	8002030 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fa29 	bl	8002452 <RTC_ByteToBcd2>
 8002000:	4603      	mov	r3, r0
 8002002:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fa22 	bl	8002452 <RTC_ByteToBcd2>
 800200e:	4603      	mov	r3, r0
 8002010:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002012:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	789b      	ldrb	r3, [r3, #2]
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fa1a 	bl	8002452 <RTC_ByteToBcd2>
 800201e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002020:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	78db      	ldrb	r3, [r3, #3]
 8002028:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e018      	b.n	8002062 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2200      	movs	r2, #0
 8002042:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002050:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002056:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	78db      	ldrb	r3, [r3, #3]
 800205c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	22ca      	movs	r2, #202	; 0xca
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2253      	movs	r2, #83	; 0x53
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f991 	bl	800239a <RTC_EnterInitMode>
 8002078:	4603      	mov	r3, r0
 800207a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d120      	bne.n	80020c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800208c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002090:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f9a4 	bl	8002408 <RTC_ExitInitMode>
 80020c0:	4603      	mov	r3, r0
 80020c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	771a      	strb	r2, [r3, #28]

  return status;
 80020de:	7cfb      	ldrb	r3, [r7, #19]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd90      	pop	{r4, r7, pc}

080020e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800211a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800211e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	0d9b      	lsrs	r3, r3, #22
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11a      	bne.n	800219a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f98f 	bl	800248c <RTC_Bcd2ToByte>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f986 	bl	800248c <RTC_Bcd2ToByte>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	789b      	ldrb	r3, [r3, #2]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f97d 	bl	800248c <RTC_Bcd2ToByte>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	7f1b      	ldrb	r3, [r3, #28]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_RTC_SetDate+0x1c>
 80021bc:	2302      	movs	r3, #2
 80021be:	e071      	b.n	80022a4 <HAL_RTC_SetDate+0x100>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2202      	movs	r2, #2
 80021ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10e      	bne.n	80021f0 <HAL_RTC_SetDate+0x4c>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	785b      	ldrb	r3, [r3, #1]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	f023 0310 	bic.w	r3, r3, #16
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	330a      	adds	r3, #10
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11c      	bne.n	8002230 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	78db      	ldrb	r3, [r3, #3]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f929 	bl	8002452 <RTC_ByteToBcd2>
 8002200:	4603      	mov	r3, r0
 8002202:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	4618      	mov	r0, r3
 800220a:	f000 f922 	bl	8002452 <RTC_ByteToBcd2>
 800220e:	4603      	mov	r3, r0
 8002210:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002212:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	789b      	ldrb	r3, [r3, #2]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f91a 	bl	8002452 <RTC_ByteToBcd2>
 800221e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002220:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e00e      	b.n	800224e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	78db      	ldrb	r3, [r3, #3]
 8002234:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800223c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002242:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	22ca      	movs	r2, #202	; 0xca
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2253      	movs	r2, #83	; 0x53
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f89b 	bl	800239a <RTC_EnterInitMode>
 8002264:	4603      	mov	r3, r0
 8002266:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002278:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800227c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8c2 	bl	8002408 <RTC_ExitInitMode>
 8002284:	4603      	mov	r3, r0
 8002286:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	22ff      	movs	r2, #255	; 0xff
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	771a      	strb	r2, [r3, #28]

  return status;
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}

080022ac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	0b5b      	lsrs	r3, r3, #13
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11a      	bne.n	8002340 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	78db      	ldrb	r3, [r3, #3]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f8bc 	bl	800248c <RTC_Bcd2ToByte>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	785b      	ldrb	r3, [r3, #1]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f8b3 	bl	800248c <RTC_Bcd2ToByte>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	789b      	ldrb	r3, [r3, #2]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f8aa 	bl	800248c <RTC_Bcd2ToByte>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002364:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002366:	f7fe fcdb 	bl	8000d20 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800236c:	e009      	b.n	8002382 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800236e:	f7fe fcd7 	bl	8000d20 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237c:	d901      	bls.n	8002382 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e007      	b.n	8002392 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d122      	bne.n	80023fe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fcaa 	bl	8000d20 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023ce:	e00c      	b.n	80023ea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023d0:	f7fe fca6 	bl	8000d20 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023de:	d904      	bls.n	80023ea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <RTC_EnterInitMode+0x64>
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d1e8      	bne.n	80023d0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002422:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff89 	bl	800234a <HAL_RTC_WaitForSynchro>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2204      	movs	r2, #4
 8002442:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002460:	e005      	b.n	800246e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	3301      	adds	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	3b0a      	subs	r3, #10
 800246c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b09      	cmp	r3, #9
 8002472:	d8f6      	bhi.n	8002462 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	b2da      	uxtb	r2, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	4313      	orrs	r3, r2
 800247e:	b2db      	uxtb	r3, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	4413      	add	r3, r2
 80024b6:	b2db      	uxtb	r3, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e03f      	b.n	8002556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fac2 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fd7b 	bl	8003004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800251c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800252c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b08a      	sub	sp, #40	; 0x28
 8002562:	af02      	add	r7, sp, #8
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	d17c      	bne.n	8002678 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_UART_Transmit+0x2c>
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e075      	b.n	800267a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_UART_Transmit+0x3e>
 8002598:	2302      	movs	r3, #2
 800259a:	e06e      	b.n	800267a <HAL_UART_Transmit+0x11c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2221      	movs	r2, #33	; 0x21
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b2:	f7fe fbb5 	bl	8000d20 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025cc:	d108      	bne.n	80025e0 <HAL_UART_Transmit+0x82>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	e003      	b.n	80025e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025f0:	e02a      	b.n	8002648 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 faf9 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e036      	b.n	800267a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10b      	bne.n	800262a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002620:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3302      	adds	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e007      	b.n	800263a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3301      	adds	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1cf      	bne.n	80025f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fac9 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e006      	b.n	800267a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b0ba      	sub	sp, #232	; 0xe8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_UART_IRQHandler+0x66>
 80026d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fbd3 	bl	8002e8e <UART_Receive_IT>
      return;
 80026e8:	e256      	b.n	8002b98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80de 	beq.w	80028b0 <HAL_UART_IRQHandler+0x22c>
 80026f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002704:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80d1 	beq.w	80028b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_UART_IRQHandler+0xae>
 800271a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_UART_IRQHandler+0xd2>
 800273e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f043 0202 	orr.w	r2, r3, #2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_UART_IRQHandler+0xf6>
 8002762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0204 	orr.w	r2, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800277a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d011      	beq.n	80027aa <HAL_UART_IRQHandler+0x126>
 8002786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0208 	orr.w	r2, r3, #8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 81ed 	beq.w	8002b8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_UART_IRQHandler+0x14e>
 80027c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fb5e 	bl	8002e8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_UART_IRQHandler+0x17a>
 80027f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d04f      	beq.n	800289e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa66 	bl	8002cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d141      	bne.n	8002896 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800282c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3314      	adds	r3, #20
 800283a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800283e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800284a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1d9      	bne.n	8002812 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	4a7d      	ldr	r2, [pc, #500]	; (8002a60 <HAL_UART_IRQHandler+0x3dc>)
 800286c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fbe1 	bl	800103a <HAL_DMA_Abort_IT>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002888:	4610      	mov	r0, r2
 800288a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288c:	e00e      	b.n	80028ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f99a 	bl	8002bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	e00a      	b.n	80028ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f996 	bl	8002bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	e006      	b.n	80028ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f992 	bl	8002bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028aa:	e170      	b.n	8002b8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ac:	bf00      	nop
    return;
 80028ae:	e16e      	b.n	8002b8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 814a 	bne.w	8002b4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8143 	beq.w	8002b4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 813c 	beq.w	8002b4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	f040 80b4 	bne.w	8002a64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8140 	beq.w	8002b92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800291a:	429a      	cmp	r2, r3
 800291c:	f080 8139 	bcs.w	8002b92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002926:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002932:	f000 8088 	beq.w	8002a46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800294c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002962:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800296e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800297a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1d9      	bne.n	8002936 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3314      	adds	r3, #20
 8002988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e1      	bne.n	8002982 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029c8:	e853 3f00 	ldrex	r3, [r3]
 80029cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e3      	bne.n	80029be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a28:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e3      	bne.n	8002a04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fa8a 	bl	8000f5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8c0 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a5c:	e099      	b.n	8002b92 <HAL_UART_IRQHandler+0x50e>
 8002a5e:	bf00      	nop
 8002a60:	08002d97 	.word	0x08002d97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 808b 	beq.w	8002b96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8086 	beq.w	8002b96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002aae:	647a      	str	r2, [r7, #68]	; 0x44
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ab6:	e841 2300 	strex	r3, r2, [r1]
 8002aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e3      	bne.n	8002a8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3314      	adds	r3, #20
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ae6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e3      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	e853 3f00 	ldrex	r3, [r3]
 8002b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0310 	bic.w	r3, r3, #16
 8002b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b2c:	61fa      	str	r2, [r7, #28]
 8002b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	69b9      	ldr	r1, [r7, #24]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	617b      	str	r3, [r7, #20]
   return(result);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e3      	bne.n	8002b08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f848 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b4c:	e023      	b.n	8002b96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_UART_IRQHandler+0x4ea>
 8002b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f929 	bl	8002dbe <UART_Transmit_IT>
    return;
 8002b6c:	e014      	b.n	8002b98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00e      	beq.n	8002b98 <HAL_UART_IRQHandler+0x514>
 8002b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f969 	bl	8002e5e <UART_EndTransmit_IT>
    return;
 8002b8c:	e004      	b.n	8002b98 <HAL_UART_IRQHandler+0x514>
    return;
 8002b8e:	bf00      	nop
 8002b90:	e002      	b.n	8002b98 <HAL_UART_IRQHandler+0x514>
      return;
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <HAL_UART_IRQHandler+0x514>
      return;
 8002b96:	bf00      	nop
  }
}
 8002b98:	37e8      	adds	r7, #232	; 0xe8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop

08002ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b090      	sub	sp, #64	; 0x40
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c04:	e050      	b.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d04c      	beq.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c14:	f7fe f884 	bl	8000d20 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d241      	bcs.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c44:	637a      	str	r2, [r7, #52]	; 0x34
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e5      	bne.n	8002c24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3314      	adds	r3, #20
 8002c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	613b      	str	r3, [r7, #16]
   return(result);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c78:	623a      	str	r2, [r7, #32]
 8002c7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	69f9      	ldr	r1, [r7, #28]
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	e841 2300 	strex	r3, r2, [r1]
 8002c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e5      	bne.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e00f      	b.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d09f      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3740      	adds	r7, #64	; 0x40
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b095      	sub	sp, #84	; 0x54
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cf8:	643a      	str	r2, [r7, #64]	; 0x40
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e5      	bne.n	8002cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3314      	adds	r3, #20
 8002d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3314      	adds	r3, #20
 8002d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e5      	bne.n	8002d0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d119      	bne.n	8002d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d68:	61ba      	str	r2, [r7, #24]
 8002d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	6979      	ldr	r1, [r7, #20]
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	613b      	str	r3, [r7, #16]
   return(result);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e5      	bne.n	8002d48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d8a:	bf00      	nop
 8002d8c:	3754      	adds	r7, #84	; 0x54
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff ff09 	bl	8002bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b21      	cmp	r3, #33	; 0x21
 8002dd0:	d13e      	bne.n	8002e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	d114      	bne.n	8002e06 <UART_Transmit_IT+0x48>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d110      	bne.n	8002e06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	1c9a      	adds	r2, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	621a      	str	r2, [r3, #32]
 8002e04:	e008      	b.n	8002e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	1c59      	adds	r1, r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6211      	str	r1, [r2, #32]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4619      	mov	r1, r3
 8002e26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10f      	bne.n	8002e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fe8e 	bl	8002ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b08c      	sub	sp, #48	; 0x30
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b22      	cmp	r3, #34	; 0x22
 8002ea0:	f040 80ab 	bne.w	8002ffa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d117      	bne.n	8002ede <UART_Receive_IT+0x50>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d113      	bne.n	8002ede <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	1c9a      	adds	r2, r3, #2
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
 8002edc:	e026      	b.n	8002f2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d007      	beq.n	8002f02 <UART_Receive_IT+0x74>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <UART_Receive_IT+0x82>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e008      	b.n	8002f22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d15a      	bne.n	8002ff6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0220 	bic.w	r2, r2, #32
 8002f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d135      	bne.n	8002fec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	613b      	str	r3, [r7, #16]
   return(result);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f023 0310 	bic.w	r3, r3, #16
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	623a      	str	r2, [r7, #32]
 8002fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d10a      	bne.n	8002fde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fdf9 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
 8002fea:	e002      	b.n	8002ff2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fde1 	bl	8002bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e002      	b.n	8002ffc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3730      	adds	r7, #48	; 0x30
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003008:	b0c0      	sub	sp, #256	; 0x100
 800300a:	af00      	add	r7, sp, #0
 800300c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	68d9      	ldr	r1, [r3, #12]
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	ea40 0301 	orr.w	r3, r0, r1
 800302c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	431a      	orrs	r2, r3
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800305c:	f021 010c 	bic.w	r1, r1, #12
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800306a:	430b      	orrs	r3, r1
 800306c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307e:	6999      	ldr	r1, [r3, #24]
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	ea40 0301 	orr.w	r3, r0, r1
 800308a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <UART_SetConfig+0x2cc>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d005      	beq.n	80030a4 <UART_SetConfig+0xa0>
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <UART_SetConfig+0x2d0>)
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d104      	bne.n	80030ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a4:	f7fe fe0e 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 80030a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030ac:	e003      	b.n	80030b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ae:	f7fe fdf5 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80030b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c0:	f040 810c 	bne.w	80032dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	1891      	adds	r1, r2, r2
 80030dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80030de:	415b      	adcs	r3, r3
 80030e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030e6:	4621      	mov	r1, r4
 80030e8:	eb12 0801 	adds.w	r8, r2, r1
 80030ec:	4629      	mov	r1, r5
 80030ee:	eb43 0901 	adc.w	r9, r3, r1
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003106:	4690      	mov	r8, r2
 8003108:	4699      	mov	r9, r3
 800310a:	4623      	mov	r3, r4
 800310c:	eb18 0303 	adds.w	r3, r8, r3
 8003110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003114:	462b      	mov	r3, r5
 8003116:	eb49 0303 	adc.w	r3, r9, r3
 800311a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800312a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800312e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003132:	460b      	mov	r3, r1
 8003134:	18db      	adds	r3, r3, r3
 8003136:	653b      	str	r3, [r7, #80]	; 0x50
 8003138:	4613      	mov	r3, r2
 800313a:	eb42 0303 	adc.w	r3, r2, r3
 800313e:	657b      	str	r3, [r7, #84]	; 0x54
 8003140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003148:	f7fd f89a 	bl	8000280 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <UART_SetConfig+0x2d4>)
 8003152:	fba3 2302 	umull	r2, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	011c      	lsls	r4, r3, #4
 800315a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003164:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	1891      	adds	r1, r2, r2
 8003172:	64b9      	str	r1, [r7, #72]	; 0x48
 8003174:	415b      	adcs	r3, r3
 8003176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800317c:	4641      	mov	r1, r8
 800317e:	eb12 0a01 	adds.w	sl, r2, r1
 8003182:	4649      	mov	r1, r9
 8003184:	eb43 0b01 	adc.w	fp, r3, r1
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800319c:	4692      	mov	sl, r2
 800319e:	469b      	mov	fp, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	eb1a 0303 	adds.w	r3, sl, r3
 80031a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031aa:	464b      	mov	r3, r9
 80031ac:	eb4b 0303 	adc.w	r3, fp, r3
 80031b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031c8:	460b      	mov	r3, r1
 80031ca:	18db      	adds	r3, r3, r3
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
 80031ce:	4613      	mov	r3, r2
 80031d0:	eb42 0303 	adc.w	r3, r2, r3
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
 80031d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031de:	f7fd f84f 	bl	8000280 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <UART_SetConfig+0x2d4>)
 80031ea:	fba3 2301 	umull	r2, r3, r3, r1
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2264      	movs	r2, #100	; 0x64
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	1acb      	subs	r3, r1, r3
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031fe:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <UART_SetConfig+0x2d4>)
 8003200:	fba3 2302 	umull	r2, r3, r3, r2
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800320c:	441c      	add	r4, r3
 800320e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003212:	2200      	movs	r2, #0
 8003214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003218:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800321c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003220:	4642      	mov	r2, r8
 8003222:	464b      	mov	r3, r9
 8003224:	1891      	adds	r1, r2, r2
 8003226:	63b9      	str	r1, [r7, #56]	; 0x38
 8003228:	415b      	adcs	r3, r3
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800322c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003230:	4641      	mov	r1, r8
 8003232:	1851      	adds	r1, r2, r1
 8003234:	6339      	str	r1, [r7, #48]	; 0x30
 8003236:	4649      	mov	r1, r9
 8003238:	414b      	adcs	r3, r1
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003248:	4659      	mov	r1, fp
 800324a:	00cb      	lsls	r3, r1, #3
 800324c:	4651      	mov	r1, sl
 800324e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003252:	4651      	mov	r1, sl
 8003254:	00ca      	lsls	r2, r1, #3
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	4603      	mov	r3, r0
 800325c:	4642      	mov	r2, r8
 800325e:	189b      	adds	r3, r3, r2
 8003260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003264:	464b      	mov	r3, r9
 8003266:	460a      	mov	r2, r1
 8003268:	eb42 0303 	adc.w	r3, r2, r3
 800326c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800327c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003284:	460b      	mov	r3, r1
 8003286:	18db      	adds	r3, r3, r3
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
 800328a:	4613      	mov	r3, r2
 800328c:	eb42 0303 	adc.w	r3, r2, r3
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800329a:	f7fc fff1 	bl	8000280 <__aeabi_uldivmod>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <UART_SetConfig+0x2d4>)
 80032a4:	fba3 1302 	umull	r1, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	2164      	movs	r1, #100	; 0x64
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	3332      	adds	r3, #50	; 0x32
 80032b6:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <UART_SetConfig+0x2d4>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	f003 0207 	and.w	r2, r3, #7
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4422      	add	r2, r4
 80032ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032cc:	e105      	b.n	80034da <UART_SetConfig+0x4d6>
 80032ce:	bf00      	nop
 80032d0:	40011000 	.word	0x40011000
 80032d4:	40011400 	.word	0x40011400
 80032d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032ee:	4642      	mov	r2, r8
 80032f0:	464b      	mov	r3, r9
 80032f2:	1891      	adds	r1, r2, r2
 80032f4:	6239      	str	r1, [r7, #32]
 80032f6:	415b      	adcs	r3, r3
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032fe:	4641      	mov	r1, r8
 8003300:	1854      	adds	r4, r2, r1
 8003302:	4649      	mov	r1, r9
 8003304:	eb43 0501 	adc.w	r5, r3, r1
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	00eb      	lsls	r3, r5, #3
 8003312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003316:	00e2      	lsls	r2, r4, #3
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	4643      	mov	r3, r8
 800331e:	18e3      	adds	r3, r4, r3
 8003320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003324:	464b      	mov	r3, r9
 8003326:	eb45 0303 	adc.w	r3, r5, r3
 800332a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800333a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800334a:	4629      	mov	r1, r5
 800334c:	008b      	lsls	r3, r1, #2
 800334e:	4621      	mov	r1, r4
 8003350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003354:	4621      	mov	r1, r4
 8003356:	008a      	lsls	r2, r1, #2
 8003358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800335c:	f7fc ff90 	bl	8000280 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4b60      	ldr	r3, [pc, #384]	; (80034e8 <UART_SetConfig+0x4e4>)
 8003366:	fba3 2302 	umull	r2, r3, r3, r2
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	011c      	lsls	r4, r3, #4
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003378:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800337c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	61b9      	str	r1, [r7, #24]
 8003388:	415b      	adcs	r3, r3
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003390:	4641      	mov	r1, r8
 8003392:	1851      	adds	r1, r2, r1
 8003394:	6139      	str	r1, [r7, #16]
 8003396:	4649      	mov	r1, r9
 8003398:	414b      	adcs	r3, r1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a8:	4659      	mov	r1, fp
 80033aa:	00cb      	lsls	r3, r1, #3
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b2:	4651      	mov	r1, sl
 80033b4:	00ca      	lsls	r2, r1, #3
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	4642      	mov	r2, r8
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033c4:	464b      	mov	r3, r9
 80033c6:	460a      	mov	r2, r1
 80033c8:	eb42 0303 	adc.w	r3, r2, r3
 80033cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033e8:	4649      	mov	r1, r9
 80033ea:	008b      	lsls	r3, r1, #2
 80033ec:	4641      	mov	r1, r8
 80033ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f2:	4641      	mov	r1, r8
 80033f4:	008a      	lsls	r2, r1, #2
 80033f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033fa:	f7fc ff41 	bl	8000280 <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4b39      	ldr	r3, [pc, #228]	; (80034e8 <UART_SetConfig+0x4e4>)
 8003404:	fba3 1302 	umull	r1, r3, r3, r2
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	2164      	movs	r1, #100	; 0x64
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	3332      	adds	r3, #50	; 0x32
 8003416:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <UART_SetConfig+0x4e4>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003422:	441c      	add	r4, r3
 8003424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003428:	2200      	movs	r2, #0
 800342a:	673b      	str	r3, [r7, #112]	; 0x70
 800342c:	677a      	str	r2, [r7, #116]	; 0x74
 800342e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003432:	4642      	mov	r2, r8
 8003434:	464b      	mov	r3, r9
 8003436:	1891      	adds	r1, r2, r2
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	415b      	adcs	r3, r3
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003442:	4641      	mov	r1, r8
 8003444:	1851      	adds	r1, r2, r1
 8003446:	6039      	str	r1, [r7, #0]
 8003448:	4649      	mov	r1, r9
 800344a:	414b      	adcs	r3, r1
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800345a:	4659      	mov	r1, fp
 800345c:	00cb      	lsls	r3, r1, #3
 800345e:	4651      	mov	r1, sl
 8003460:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003464:	4651      	mov	r1, sl
 8003466:	00ca      	lsls	r2, r1, #3
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	4603      	mov	r3, r0
 800346e:	4642      	mov	r2, r8
 8003470:	189b      	adds	r3, r3, r2
 8003472:	66bb      	str	r3, [r7, #104]	; 0x68
 8003474:	464b      	mov	r3, r9
 8003476:	460a      	mov	r2, r1
 8003478:	eb42 0303 	adc.w	r3, r2, r3
 800347c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	663b      	str	r3, [r7, #96]	; 0x60
 8003488:	667a      	str	r2, [r7, #100]	; 0x64
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003496:	4649      	mov	r1, r9
 8003498:	008b      	lsls	r3, r1, #2
 800349a:	4641      	mov	r1, r8
 800349c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a0:	4641      	mov	r1, r8
 80034a2:	008a      	lsls	r2, r1, #2
 80034a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034a8:	f7fc feea 	bl	8000280 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <UART_SetConfig+0x4e4>)
 80034b2:	fba3 1302 	umull	r1, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2164      	movs	r1, #100	; 0x64
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	3332      	adds	r3, #50	; 0x32
 80034c4:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <UART_SetConfig+0x4e4>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4422      	add	r2, r4
 80034d8:	609a      	str	r2, [r3, #8]
}
 80034da:	bf00      	nop
 80034dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e6:	bf00      	nop
 80034e8:	51eb851f 	.word	0x51eb851f

080034ec <__NVIC_SetPriority>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	6039      	str	r1, [r7, #0]
 80034f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	db0a      	blt.n	8003516 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	490c      	ldr	r1, [pc, #48]	; (8003538 <__NVIC_SetPriority+0x4c>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	0112      	lsls	r2, r2, #4
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	440b      	add	r3, r1
 8003510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003514:	e00a      	b.n	800352c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4908      	ldr	r1, [pc, #32]	; (800353c <__NVIC_SetPriority+0x50>)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	3b04      	subs	r3, #4
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	440b      	add	r3, r1
 800352a:	761a      	strb	r2, [r3, #24]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000e100 	.word	0xe000e100
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003544:	2100      	movs	r1, #0
 8003546:	f06f 0004 	mvn.w	r0, #4
 800354a:	f7ff ffcf 	bl	80034ec <__NVIC_SetPriority>
#endif
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800355a:	f3ef 8305 	mrs	r3, IPSR
 800355e:	603b      	str	r3, [r7, #0]
  return(result);
 8003560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003566:	f06f 0305 	mvn.w	r3, #5
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	e00c      	b.n	8003588 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <osKernelInitialize+0x44>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d105      	bne.n	8003582 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <osKernelInitialize+0x44>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800357c:	2300      	movs	r3, #0
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	e002      	b.n	8003588 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003588:	687b      	ldr	r3, [r7, #4]
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000160 	.word	0x20000160

0800359c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a2:	f3ef 8305 	mrs	r3, IPSR
 80035a6:	603b      	str	r3, [r7, #0]
  return(result);
 80035a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80035ae:	f06f 0305 	mvn.w	r3, #5
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	e010      	b.n	80035d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <osKernelStart+0x48>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d109      	bne.n	80035d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035be:	f7ff ffbf 	bl	8003540 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <osKernelStart+0x48>)
 80035c4:	2202      	movs	r2, #2
 80035c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035c8:	f001 f866 	bl	8004698 <vTaskStartScheduler>
      stat = osOK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	e002      	b.n	80035d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035d8:	687b      	ldr	r3, [r7, #4]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000160 	.word	0x20000160

080035e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035f8:	f3ef 8305 	mrs	r3, IPSR
 80035fc:	617b      	str	r3, [r7, #20]
  return(result);
 80035fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003600:	2b00      	cmp	r3, #0
 8003602:	d17e      	bne.n	8003702 <osThreadNew+0x11a>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d07b      	beq.n	8003702 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800360e:	2318      	movs	r3, #24
 8003610:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d045      	beq.n	80036ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <osThreadNew+0x48>
        name = attr->name;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <osThreadNew+0x6e>
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b38      	cmp	r3, #56	; 0x38
 8003648:	d805      	bhi.n	8003656 <osThreadNew+0x6e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <osThreadNew+0x72>
        return (NULL);
 8003656:	2300      	movs	r3, #0
 8003658:	e054      	b.n	8003704 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00e      	beq.n	8003690 <osThreadNew+0xa8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b5b      	cmp	r3, #91	; 0x5b
 8003678:	d90a      	bls.n	8003690 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <osThreadNew+0xa8>
        mem = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e010      	b.n	80036b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10c      	bne.n	80036b2 <osThreadNew+0xca>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d108      	bne.n	80036b2 <osThreadNew+0xca>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d104      	bne.n	80036b2 <osThreadNew+0xca>
          mem = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e001      	b.n	80036b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d110      	bne.n	80036da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036c0:	9202      	str	r2, [sp, #8]
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6a3a      	ldr	r2, [r7, #32]
 80036cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fe0c 	bl	80042ec <xTaskCreateStatic>
 80036d4:	4603      	mov	r3, r0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e013      	b.n	8003702 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d110      	bne.n	8003702 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fe57 	bl	80043a6 <xTaskCreate>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d001      	beq.n	8003702 <osThreadNew+0x11a>
            hTask = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003702:	693b      	ldr	r3, [r7, #16]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003714:	f3ef 8305 	mrs	r3, IPSR
 8003718:	60bb      	str	r3, [r7, #8]
  return(result);
 800371a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <osDelay+0x1c>
    stat = osErrorISR;
 8003720:	f06f 0305 	mvn.w	r3, #5
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e007      	b.n	8003738 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 ff7c 	bl	8004630 <vTaskDelay>
    }
  }

  return (stat);
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <vApplicationGetIdleTaskMemory+0x2c>)
 8003754:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a06      	ldr	r2, [pc, #24]	; (8003774 <vApplicationGetIdleTaskMemory+0x30>)
 800375a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000164 	.word	0x20000164
 8003774:	200001c0 	.word	0x200001c0

08003778 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003788:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <vApplicationGetTimerTaskMemory+0x30>)
 800378e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	200003c0 	.word	0x200003c0
 80037a8:	2000041c 	.word	0x2000041c

080037ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f103 0208 	add.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f103 0208 	add.w	r2, r3, #8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 0208 	add.w	r2, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	601a      	str	r2, [r3, #0]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d103      	bne.n	800386e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e00c      	b.n	8003888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3308      	adds	r3, #8
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e002      	b.n	800387c <vListInsert+0x2e>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d2f6      	bcs.n	8003876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6892      	ldr	r2, [r2, #8]
 80038d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6852      	ldr	r2, [r2, #4]
 80038e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d103      	bne.n	80038f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	1e5a      	subs	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800393e:	f002 f851 	bl	80059e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	441a      	add	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	3b01      	subs	r3, #1
 8003970:	68f9      	ldr	r1, [r7, #12]
 8003972:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	441a      	add	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d114      	bne.n	80039be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01a      	beq.n	80039d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3310      	adds	r3, #16
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 f903 	bl	8004bac <xTaskRemoveFromEventList>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d012      	beq.n	80039d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <xQueueGenericReset+0xcc>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	e009      	b.n	80039d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3310      	adds	r3, #16
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fef2 	bl	80037ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3324      	adds	r3, #36	; 0x24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff feed 	bl	80037ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039d2:	f002 f837 	bl	8005a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039d6:	2301      	movs	r3, #1
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	; 0x38
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <xQueueGenericCreateStatic+0x52>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <xQueueGenericCreateStatic+0x56>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueGenericCreateStatic+0x58>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	623b      	str	r3, [r7, #32]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <xQueueGenericCreateStatic+0x7e>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <xQueueGenericCreateStatic+0x82>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <xQueueGenericCreateStatic+0x84>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61fb      	str	r3, [r7, #28]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a82:	2350      	movs	r3, #80	; 0x50
 8003a84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b50      	cmp	r3, #80	; 0x50
 8003a8a:	d00a      	beq.n	8003aa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	61bb      	str	r3, [r7, #24]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003aa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00d      	beq.n	8003aca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ab6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f805 	bl	8003ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3730      	adds	r7, #48	; 0x30
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e002      	b.n	8003af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b02:	2101      	movs	r1, #1
 8003b04:	69b8      	ldr	r0, [r7, #24]
 8003b06:	f7ff ff05 	bl	8003914 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08e      	sub	sp, #56	; 0x38
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <xQueueGenericSend+0x32>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <xQueueGenericSend+0x40>
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <xQueueGenericSend+0x44>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <xQueueGenericSend+0x46>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <xQueueGenericSend+0x60>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d103      	bne.n	8003b8a <xQueueGenericSend+0x6e>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <xQueueGenericSend+0x72>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <xQueueGenericSend+0x74>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <xQueueGenericSend+0x8e>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	623b      	str	r3, [r7, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003baa:	f001 f9bd 	bl	8004f28 <xTaskGetSchedulerState>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <xQueueGenericSend+0x9e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <xQueueGenericSend+0xa2>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericSend+0xa4>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueGenericSend+0xbe>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	61fb      	str	r3, [r7, #28]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bda:	f001 ff03 	bl	80059e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <xQueueGenericSend+0xd4>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d129      	bne.n	8003c44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bf6:	f000 fa0b 	bl	8004010 <prvCopyDataToQueue>
 8003bfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	3324      	adds	r3, #36	; 0x24
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 ffcf 	bl	8004bac <xTaskRemoveFromEventList>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <xQueueGenericSend+0x1f8>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	e00a      	b.n	8003c3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c2c:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <xQueueGenericSend+0x1f8>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c3c:	f001 ff02 	bl	8005a44 <vPortExitCritical>
				return pdPASS;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e063      	b.n	8003d0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c4a:	f001 fefb 	bl	8005a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e05c      	b.n	8003d0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 f809 	bl	8004c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c66:	f001 feed 	bl	8005a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c6a:	f000 fd7b 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c6e:	f001 feb9 	bl	80059e4 <vPortEnterCritical>
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d103      	bne.n	8003c88 <xQueueGenericSend+0x16c>
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d103      	bne.n	8003c9e <xQueueGenericSend+0x182>
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c9e:	f001 fed1 	bl	8005a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca2:	1d3a      	adds	r2, r7, #4
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fff8 	bl	8004ca0 <xTaskCheckForTimeOut>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d124      	bne.n	8003d00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb8:	f000 faa2 	bl	8004200 <prvIsQueueFull>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d018      	beq.n	8003cf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	3310      	adds	r3, #16
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 ff1e 	bl	8004b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd2:	f000 fa2d 	bl	8004130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cd6:	f000 fd53 	bl	8004780 <xTaskResumeAll>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f47f af7c 	bne.w	8003bda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <xQueueGenericSend+0x1f8>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	e772      	b.n	8003bda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cf6:	f000 fa1b 	bl	8004130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cfa:	f000 fd41 	bl	8004780 <xTaskResumeAll>
 8003cfe:	e76c      	b.n	8003bda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d02:	f000 fa15 	bl	8004130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d06:	f000 fd3b 	bl	8004780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3738      	adds	r7, #56	; 0x38
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b090      	sub	sp, #64	; 0x40
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <xQueueGenericSendFromISR+0x3c>
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <xQueueGenericSendFromISR+0x40>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <xQueueGenericSendFromISR+0x42>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d103      	bne.n	8003d82 <xQueueGenericSendFromISR+0x6a>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <xQueueGenericSendFromISR+0x6e>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <xQueueGenericSendFromISR+0x70>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	623b      	str	r3, [r7, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003da2:	f001 ff01 	bl	8005ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003da6:	f3ef 8211 	mrs	r2, BASEPRI
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	61fa      	str	r2, [r7, #28]
 8003dbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <xQueueGenericSendFromISR+0xbc>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d12f      	bne.n	8003e34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dea:	f000 f911 	bl	8004010 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003dee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d112      	bne.n	8003e1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d016      	beq.n	8003e2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	3324      	adds	r3, #36	; 0x24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fed1 	bl	8004bac <xTaskRemoveFromEventList>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e007      	b.n	8003e2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e22:	3301      	adds	r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	b25a      	sxtb	r2, r3
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003e32:	e001      	b.n	8003e38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3740      	adds	r7, #64	; 0x40
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08c      	sub	sp, #48	; 0x30
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <xQueueReceive+0x30>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	623b      	str	r3, [r7, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <xQueueReceive+0x3e>
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <xQueueReceive+0x42>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <xQueueReceive+0x44>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xQueueReceive+0x5e>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	61fb      	str	r3, [r7, #28]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eae:	f001 f83b 	bl	8004f28 <xTaskGetSchedulerState>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <xQueueReceive+0x6e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <xQueueReceive+0x72>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <xQueueReceive+0x74>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <xQueueReceive+0x8e>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	61bb      	str	r3, [r7, #24]
}
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ede:	f001 fd81 	bl	80059e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01f      	beq.n	8003f2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef2:	f000 f8f7 	bl	80040e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	1e5a      	subs	r2, r3, #1
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00f      	beq.n	8003f26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	3310      	adds	r3, #16
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fe4e 	bl	8004bac <xTaskRemoveFromEventList>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f16:	4b3d      	ldr	r3, [pc, #244]	; (800400c <xQueueReceive+0x1bc>)
 8003f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f26:	f001 fd8d 	bl	8005a44 <vPortExitCritical>
				return pdPASS;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e069      	b.n	8004002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f34:	f001 fd86 	bl	8005a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e062      	b.n	8004002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f42:	f107 0310 	add.w	r3, r7, #16
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fe94 	bl	8004c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f50:	f001 fd78 	bl	8005a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f54:	f000 fc06 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f58:	f001 fd44 	bl	80059e4 <vPortEnterCritical>
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d103      	bne.n	8003f72 <xQueueReceive+0x122>
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d103      	bne.n	8003f88 <xQueueReceive+0x138>
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f88:	f001 fd5c 	bl	8005a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f8c:	1d3a      	adds	r2, r7, #4
 8003f8e:	f107 0310 	add.w	r3, r7, #16
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe83 	bl	8004ca0 <xTaskCheckForTimeOut>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d123      	bne.n	8003fe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa2:	f000 f917 	bl	80041d4 <prvIsQueueEmpty>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d017      	beq.n	8003fdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	3324      	adds	r3, #36	; 0x24
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fda9 	bl	8004b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fbc:	f000 f8b8 	bl	8004130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fc0:	f000 fbde 	bl	8004780 <xTaskResumeAll>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d189      	bne.n	8003ede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <xQueueReceive+0x1bc>)
 8003fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	e780      	b.n	8003ede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fde:	f000 f8a7 	bl	8004130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe2:	f000 fbcd 	bl	8004780 <xTaskResumeAll>
 8003fe6:	e77a      	b.n	8003ede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fea:	f000 f8a1 	bl	8004130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fee:	f000 fbc7 	bl	8004780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff4:	f000 f8ee 	bl	80041d4 <prvIsQueueEmpty>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f43f af6f 	beq.w	8003ede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004002:	4618      	mov	r0, r3
 8004004:	3730      	adds	r7, #48	; 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d14d      	bne.n	80040d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 ff92 	bl	8004f64 <xTaskPriorityDisinherit>
 8004040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	e043      	b.n	80040d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d119      	bne.n	8004084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6858      	ldr	r0, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	461a      	mov	r2, r3
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	f001 fff8 	bl	8006050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	441a      	add	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	429a      	cmp	r2, r3
 8004078:	d32b      	bcc.n	80040d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e026      	b.n	80040d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68d8      	ldr	r0, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	461a      	mov	r2, r3
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	f001 ffde 	bl	8006050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	425b      	negs	r3, r3
 800409e:	441a      	add	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d207      	bcs.n	80040c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	425b      	negs	r3, r3
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d105      	bne.n	80040d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040da:	697b      	ldr	r3, [r7, #20]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	d303      	bcc.n	8004118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	461a      	mov	r2, r3
 8004122:	6838      	ldr	r0, [r7, #0]
 8004124:	f001 ff94 	bl	8006050 <memcpy>
	}
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004138:	f001 fc54 	bl	80059e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004144:	e011      	b.n	800416a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fd2a 	bl	8004bac <xTaskRemoveFromEventList>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800415e:	f000 fe01 	bl	8004d64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	3b01      	subs	r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	dce9      	bgt.n	8004146 <prvUnlockQueue+0x16>
 8004172:	e000      	b.n	8004176 <prvUnlockQueue+0x46>
					break;
 8004174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800417e:	f001 fc61 	bl	8005a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004182:	f001 fc2f 	bl	80059e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800418c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800418e:	e011      	b.n	80041b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3310      	adds	r3, #16
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fd05 	bl	8004bac <xTaskRemoveFromEventList>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041a8:	f000 fddc 	bl	8004d64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	dce9      	bgt.n	8004190 <prvUnlockQueue+0x60>
 80041bc:	e000      	b.n	80041c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041c8:	f001 fc3c 	bl	8005a44 <vPortExitCritical>
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041dc:	f001 fc02 	bl	80059e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e001      	b.n	80041f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041f2:	f001 fc27 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004208:	f001 fbec 	bl	80059e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	429a      	cmp	r2, r3
 8004216:	d102      	bne.n	800421e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e001      	b.n	8004222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004222:	f001 fc0f 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e014      	b.n	800426a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004240:	4a0f      	ldr	r2, [pc, #60]	; (8004280 <vQueueAddToRegistry+0x50>)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800424c:	490c      	ldr	r1, [pc, #48]	; (8004280 <vQueueAddToRegistry+0x50>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <vQueueAddToRegistry+0x50>)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004262:	e006      	b.n	8004272 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3301      	adds	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b07      	cmp	r3, #7
 800426e:	d9e7      	bls.n	8004240 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	2000081c 	.word	0x2000081c

08004284 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004294:	f001 fba6 	bl	80059e4 <vPortEnterCritical>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800429e:	b25b      	sxtb	r3, r3
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d103      	bne.n	80042ae <vQueueWaitForMessageRestricted+0x2a>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042b4:	b25b      	sxtb	r3, r3
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d103      	bne.n	80042c4 <vQueueWaitForMessageRestricted+0x40>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c4:	f001 fbbe 	bl	8005a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	3324      	adds	r3, #36	; 0x24
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fc3b 	bl	8004b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042de:	6978      	ldr	r0, [r7, #20]
 80042e0:	f7ff ff26 	bl	8004130 <prvUnlockQueue>
	}
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08e      	sub	sp, #56	; 0x38
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	623b      	str	r3, [r7, #32]
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <xTaskCreateStatic+0x46>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	61fb      	str	r3, [r7, #28]
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004332:	235c      	movs	r3, #92	; 0x5c
 8004334:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b5c      	cmp	r3, #92	; 0x5c
 800433a:	d00a      	beq.n	8004352 <xTaskCreateStatic+0x66>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	61bb      	str	r3, [r7, #24]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004352:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01e      	beq.n	8004398 <xTaskCreateStatic+0xac>
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004368:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	2202      	movs	r2, #2
 800436e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004372:	2300      	movs	r3, #0
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	9302      	str	r3, [sp, #8]
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f850 	bl	8004430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004392:	f000 f8dd 	bl	8004550 <prvAddNewTaskToReadyList>
 8004396:	e001      	b.n	800439c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800439c:	697b      	ldr	r3, [r7, #20]
	}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b08c      	sub	sp, #48	; 0x30
 80043aa:	af04      	add	r7, sp, #16
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fc34 	bl	8005c28 <pvPortMalloc>
 80043c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00e      	beq.n	80043e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043c8:	205c      	movs	r0, #92	; 0x5c
 80043ca:	f001 fc2d 	bl	8005c28 <pvPortMalloc>
 80043ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
 80043dc:	e005      	b.n	80043ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f001 fcee 	bl	8005dc0 <vPortFree>
 80043e4:	e001      	b.n	80043ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d017      	beq.n	8004420 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9303      	str	r3, [sp, #12]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	9302      	str	r3, [sp, #8]
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f80e 	bl	8004430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004414:	69f8      	ldr	r0, [r7, #28]
 8004416:	f000 f89b 	bl	8004550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800441a:	2301      	movs	r3, #1
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e002      	b.n	8004426 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004426:	69bb      	ldr	r3, [r7, #24]
	}
 8004428:	4618      	mov	r0, r3
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	461a      	mov	r2, r3
 8004448:	21a5      	movs	r1, #165	; 0xa5
 800444a:	f001 fe0f 	bl	800606c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004458:	3b01      	subs	r3, #1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	617b      	str	r3, [r7, #20]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01f      	beq.n	80044ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	e012      	b.n	80044ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	7819      	ldrb	r1, [r3, #0]
 800449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	3334      	adds	r3, #52	; 0x34
 80044a4:	460a      	mov	r2, r1
 80044a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d006      	beq.n	80044c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d9e9      	bls.n	8004494 <prvInitialiseNewTask+0x64>
 80044c0:	e000      	b.n	80044c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80044c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044cc:	e003      	b.n	80044d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	2b37      	cmp	r3, #55	; 0x37
 80044da:	d901      	bls.n	80044e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044dc:	2337      	movs	r3, #55	; 0x37
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	2200      	movs	r2, #0
 80044f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	3304      	adds	r3, #4
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f978 	bl	80037ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	3318      	adds	r3, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f973 	bl	80037ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800450a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2200      	movs	r2, #0
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	69b8      	ldr	r0, [r7, #24]
 8004530:	f001 f928 	bl	8005784 <pxPortInitialiseStack>
 8004534:	4602      	mov	r2, r0
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004546:	bf00      	nop
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004558:	f001 fa44 	bl	80059e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800455c:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004566:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d110      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800457c:	f000 fc16 	bl	8004dac <prvInitialiseTaskLists>
 8004580:	e00d      	b.n	800459e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <prvAddNewTaskToReadyList+0xcc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d802      	bhi.n	800459e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d903      	bls.n	80045c4 <prvAddNewTaskToReadyList+0x74>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	4a18      	ldr	r2, [pc, #96]	; (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <prvAddNewTaskToReadyList+0xd8>)
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7ff f913 	bl	8003806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045e0:	f001 fa30 	bl	8005a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <prvAddNewTaskToReadyList+0xcc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d207      	bcs.n	800460a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <prvAddNewTaskToReadyList+0xdc>)
 80045fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000d30 	.word	0x20000d30
 8004618:	2000085c 	.word	0x2000085c
 800461c:	20000d3c 	.word	0x20000d3c
 8004620:	20000d4c 	.word	0x20000d4c
 8004624:	20000d38 	.word	0x20000d38
 8004628:	20000860 	.word	0x20000860
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d017      	beq.n	8004672 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <vTaskDelay+0x60>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <vTaskDelay+0x30>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004660:	f000 f880 	bl	8004764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004664:	2100      	movs	r1, #0
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fcea 	bl	8005040 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800466c:	f000 f888 	bl	8004780 <xTaskResumeAll>
 8004670:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <vTaskDelay+0x64>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000d58 	.word	0x20000d58
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046a6:	463a      	mov	r2, r7
 80046a8:	1d39      	adds	r1, r7, #4
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f848 	bl	8003744 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	9202      	str	r2, [sp, #8]
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	460a      	mov	r2, r1
 80046c6:	4921      	ldr	r1, [pc, #132]	; (800474c <vTaskStartScheduler+0xb4>)
 80046c8:	4821      	ldr	r0, [pc, #132]	; (8004750 <vTaskStartScheduler+0xb8>)
 80046ca:	f7ff fe0f 	bl	80042ec <xTaskCreateStatic>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4a20      	ldr	r2, [pc, #128]	; (8004754 <vTaskStartScheduler+0xbc>)
 80046d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <vTaskStartScheduler+0xbc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046dc:	2301      	movs	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e001      	b.n	80046e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d102      	bne.n	80046f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046ec:	f000 fcfc 	bl	80050e8 <xTimerCreateTimerTask>
 80046f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d116      	bne.n	8004726 <vTaskStartScheduler+0x8e>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	613b      	str	r3, [r7, #16]
}
 800470a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800470c:	4b12      	ldr	r3, [pc, #72]	; (8004758 <vTaskStartScheduler+0xc0>)
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <vTaskStartScheduler+0xc4>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <vTaskStartScheduler+0xc8>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004720:	f001 f8be 	bl	80058a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004724:	e00e      	b.n	8004744 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d10a      	bne.n	8004744 <vTaskStartScheduler+0xac>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60fb      	str	r3, [r7, #12]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <vTaskStartScheduler+0xaa>
}
 8004744:	bf00      	nop
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	080069b0 	.word	0x080069b0
 8004750:	08004d7d 	.word	0x08004d7d
 8004754:	20000d54 	.word	0x20000d54
 8004758:	20000d50 	.word	0x20000d50
 800475c:	20000d3c 	.word	0x20000d3c
 8004760:	20000d34 	.word	0x20000d34

08004764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <vTaskSuspendAll+0x18>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a03      	ldr	r2, [pc, #12]	; (800477c <vTaskSuspendAll+0x18>)
 8004770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000d58 	.word	0x20000d58

08004780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800478e:	4b42      	ldr	r3, [pc, #264]	; (8004898 <xTaskResumeAll+0x118>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <xTaskResumeAll+0x2c>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	603b      	str	r3, [r7, #0]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ac:	f001 f91a 	bl	80059e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047b0:	4b39      	ldr	r3, [pc, #228]	; (8004898 <xTaskResumeAll+0x118>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	4a38      	ldr	r2, [pc, #224]	; (8004898 <xTaskResumeAll+0x118>)
 80047b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <xTaskResumeAll+0x118>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d162      	bne.n	8004888 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <xTaskResumeAll+0x11c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d05e      	beq.n	8004888 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ca:	e02f      	b.n	800482c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047cc:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <xTaskResumeAll+0x120>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3318      	adds	r3, #24
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff f871 	bl	80038c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f86c 	bl	80038c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <xTaskResumeAll+0x124>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d903      	bls.n	80047fc <xTaskResumeAll+0x7c>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <xTaskResumeAll+0x124>)
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <xTaskResumeAll+0x128>)
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fe fff7 	bl	8003806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	4b23      	ldr	r3, [pc, #140]	; (80048ac <xTaskResumeAll+0x12c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004826:	4b22      	ldr	r3, [pc, #136]	; (80048b0 <xTaskResumeAll+0x130>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482c:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <xTaskResumeAll+0x120>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1cb      	bne.n	80047cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800483a:	f000 fb55 	bl	8004ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800483e:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <xTaskResumeAll+0x134>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d010      	beq.n	800486c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800484a:	f000 f847 	bl	80048dc <xTaskIncrementTick>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <xTaskResumeAll+0x130>)
 8004856:	2201      	movs	r2, #1
 8004858:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3b01      	subs	r3, #1
 800485e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f1      	bne.n	800484a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <xTaskResumeAll+0x134>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <xTaskResumeAll+0x130>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004874:	2301      	movs	r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <xTaskResumeAll+0x138>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004888:	f001 f8dc 	bl	8005a44 <vPortExitCritical>

	return xAlreadyYielded;
 800488c:	68bb      	ldr	r3, [r7, #8]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000d58 	.word	0x20000d58
 800489c:	20000d30 	.word	0x20000d30
 80048a0:	20000cf0 	.word	0x20000cf0
 80048a4:	20000d38 	.word	0x20000d38
 80048a8:	20000860 	.word	0x20000860
 80048ac:	2000085c 	.word	0x2000085c
 80048b0:	20000d44 	.word	0x20000d44
 80048b4:	20000d40 	.word	0x20000d40
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <xTaskGetTickCount+0x1c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048c8:	687b      	ldr	r3, [r7, #4]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000d34 	.word	0x20000d34

080048dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e6:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <xTaskIncrementTick+0x148>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 808f 	bne.w	8004a0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048f0:	4b4d      	ldr	r3, [pc, #308]	; (8004a28 <xTaskIncrementTick+0x14c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048f8:	4a4b      	ldr	r2, [pc, #300]	; (8004a28 <xTaskIncrementTick+0x14c>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d120      	bne.n	8004946 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004904:	4b49      	ldr	r3, [pc, #292]	; (8004a2c <xTaskIncrementTick+0x150>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <xTaskIncrementTick+0x48>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	603b      	str	r3, [r7, #0]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <xTaskIncrementTick+0x46>
 8004924:	4b41      	ldr	r3, [pc, #260]	; (8004a2c <xTaskIncrementTick+0x150>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	4b41      	ldr	r3, [pc, #260]	; (8004a30 <xTaskIncrementTick+0x154>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3f      	ldr	r2, [pc, #252]	; (8004a2c <xTaskIncrementTick+0x150>)
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4a3f      	ldr	r2, [pc, #252]	; (8004a30 <xTaskIncrementTick+0x154>)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <xTaskIncrementTick+0x158>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a3d      	ldr	r2, [pc, #244]	; (8004a34 <xTaskIncrementTick+0x158>)
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	f000 fad1 	bl	8004ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004946:	4b3c      	ldr	r3, [pc, #240]	; (8004a38 <xTaskIncrementTick+0x15c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d349      	bcc.n	80049e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004950:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <xTaskIncrementTick+0x150>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <xTaskIncrementTick+0x15c>)
 800495c:	f04f 32ff 	mov.w	r2, #4294967295
 8004960:	601a      	str	r2, [r3, #0]
					break;
 8004962:	e03f      	b.n	80049e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004964:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <xTaskIncrementTick+0x150>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	d203      	bcs.n	8004984 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800497c:	4a2e      	ldr	r2, [pc, #184]	; (8004a38 <xTaskIncrementTick+0x15c>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004982:	e02f      	b.n	80049e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe ff99 	bl	80038c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d004      	beq.n	80049a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	3318      	adds	r3, #24
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe ff90 	bl	80038c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <xTaskIncrementTick+0x160>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d903      	bls.n	80049b4 <xTaskIncrementTick+0xd8>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <xTaskIncrementTick+0x160>)
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <xTaskIncrementTick+0x164>)
 80049c2:	441a      	add	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7fe ff1b 	bl	8003806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <xTaskIncrementTick+0x168>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	429a      	cmp	r2, r3
 80049dc:	d3b8      	bcc.n	8004950 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049de:	2301      	movs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e2:	e7b5      	b.n	8004950 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049e4:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <xTaskIncrementTick+0x168>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	4915      	ldr	r1, [pc, #84]	; (8004a40 <xTaskIncrementTick+0x164>)
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d901      	bls.n	8004a00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <xTaskIncrementTick+0x16c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e004      	b.n	8004a18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <xTaskIncrementTick+0x170>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <xTaskIncrementTick+0x170>)
 8004a16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a18:	697b      	ldr	r3, [r7, #20]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000d58 	.word	0x20000d58
 8004a28:	20000d34 	.word	0x20000d34
 8004a2c:	20000ce8 	.word	0x20000ce8
 8004a30:	20000cec 	.word	0x20000cec
 8004a34:	20000d48 	.word	0x20000d48
 8004a38:	20000d50 	.word	0x20000d50
 8004a3c:	20000d38 	.word	0x20000d38
 8004a40:	20000860 	.word	0x20000860
 8004a44:	2000085c 	.word	0x2000085c
 8004a48:	20000d44 	.word	0x20000d44
 8004a4c:	20000d40 	.word	0x20000d40

08004a50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <vTaskSwitchContext+0xa8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a5e:	4b27      	ldr	r3, [pc, #156]	; (8004afc <vTaskSwitchContext+0xac>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a64:	e041      	b.n	8004aea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <vTaskSwitchContext+0xac>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6c:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <vTaskSwitchContext+0xb0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e010      	b.n	8004a96 <vTaskSwitchContext+0x46>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <vTaskSwitchContext+0x3e>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	491b      	ldr	r1, [pc, #108]	; (8004b04 <vTaskSwitchContext+0xb4>)
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0e4      	beq.n	8004a74 <vTaskSwitchContext+0x24>
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <vTaskSwitchContext+0xb4>)
 8004ab6:	4413      	add	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3308      	adds	r3, #8
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d104      	bne.n	8004ada <vTaskSwitchContext+0x8a>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <vTaskSwitchContext+0xb8>)
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <vTaskSwitchContext+0xb0>)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6013      	str	r3, [r2, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000d58 	.word	0x20000d58
 8004afc:	20000d44 	.word	0x20000d44
 8004b00:	20000d38 	.word	0x20000d38
 8004b04:	20000860 	.word	0x20000860
 8004b08:	2000085c 	.word	0x2000085c

08004b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fb      	str	r3, [r7, #12]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <vTaskPlaceOnEventList+0x44>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3318      	adds	r3, #24
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fe fe87 	bl	800384e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b40:	2101      	movs	r1, #1
 8004b42:	6838      	ldr	r0, [r7, #0]
 8004b44:	f000 fa7c 	bl	8005040 <prvAddCurrentTaskToDelayedList>
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	2000085c 	.word	0x2000085c

08004b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	617b      	str	r3, [r7, #20]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3318      	adds	r3, #24
 8004b82:	4619      	mov	r1, r3
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7fe fe3e 	bl	8003806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295
 8004b94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f000 fa51 	bl	8005040 <prvAddCurrentTaskToDelayedList>
	}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	2000085c 	.word	0x2000085c

08004bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60fb      	str	r3, [r7, #12]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fe6f 	bl	80038c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <xTaskRemoveFromEventList+0xb0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11d      	bne.n	8004c26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fe66 	bl	80038c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <xTaskRemoveFromEventList+0xb4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d903      	bls.n	8004c08 <xTaskRemoveFromEventList+0x5c>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <xTaskRemoveFromEventList+0xb4>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <xTaskRemoveFromEventList+0xb8>)
 8004c16:	441a      	add	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fe fdf1 	bl	8003806 <vListInsertEnd>
 8004c24:	e005      	b.n	8004c32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	480e      	ldr	r0, [pc, #56]	; (8004c68 <xTaskRemoveFromEventList+0xbc>)
 8004c2e:	f7fe fdea 	bl	8003806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <xTaskRemoveFromEventList+0xc0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d905      	bls.n	8004c4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <xTaskRemoveFromEventList+0xc4>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e001      	b.n	8004c50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c50:	697b      	ldr	r3, [r7, #20]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000d58 	.word	0x20000d58
 8004c60:	20000d38 	.word	0x20000d38
 8004c64:	20000860 	.word	0x20000860
 8004c68:	20000cf0 	.word	0x20000cf0
 8004c6c:	2000085c 	.word	0x2000085c
 8004c70:	20000d44 	.word	0x20000d44

08004c74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <vTaskInternalSetTimeOutState+0x24>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <vTaskInternalSetTimeOutState+0x28>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	605a      	str	r2, [r3, #4]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	20000d48 	.word	0x20000d48
 8004c9c:	20000d34 	.word	0x20000d34

08004ca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	60fb      	str	r3, [r7, #12]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ce2:	f000 fe7f 	bl	80059e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <xTaskCheckForTimeOut+0xbc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d102      	bne.n	8004d06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e023      	b.n	8004d4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <xTaskCheckForTimeOut+0xc0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d007      	beq.n	8004d22 <xTaskCheckForTimeOut+0x82>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e015      	b.n	8004d4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d20b      	bcs.n	8004d44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff9b 	bl	8004c74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	e004      	b.n	8004d4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d4e:	f000 fe79 	bl	8005a44 <vPortExitCritical>

	return xReturn;
 8004d52:	69fb      	ldr	r3, [r7, #28]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000d34 	.word	0x20000d34
 8004d60:	20000d48 	.word	0x20000d48

08004d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <vTaskMissedYield+0x14>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000d44 	.word	0x20000d44

08004d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d84:	f000 f852 	bl	8004e2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <prvIdleTask+0x28>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d9f9      	bls.n	8004d84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <prvIdleTask+0x2c>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004da0:	e7f0      	b.n	8004d84 <prvIdleTask+0x8>
 8004da2:	bf00      	nop
 8004da4:	20000860 	.word	0x20000860
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e00c      	b.n	8004dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <prvInitialiseTaskLists+0x60>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fcf0 	bl	80037ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b37      	cmp	r3, #55	; 0x37
 8004dd6:	d9ef      	bls.n	8004db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dd8:	480d      	ldr	r0, [pc, #52]	; (8004e10 <prvInitialiseTaskLists+0x64>)
 8004dda:	f7fe fce7 	bl	80037ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dde:	480d      	ldr	r0, [pc, #52]	; (8004e14 <prvInitialiseTaskLists+0x68>)
 8004de0:	f7fe fce4 	bl	80037ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004de4:	480c      	ldr	r0, [pc, #48]	; (8004e18 <prvInitialiseTaskLists+0x6c>)
 8004de6:	f7fe fce1 	bl	80037ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dea:	480c      	ldr	r0, [pc, #48]	; (8004e1c <prvInitialiseTaskLists+0x70>)
 8004dec:	f7fe fcde 	bl	80037ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004df0:	480b      	ldr	r0, [pc, #44]	; (8004e20 <prvInitialiseTaskLists+0x74>)
 8004df2:	f7fe fcdb 	bl	80037ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <prvInitialiseTaskLists+0x78>)
 8004df8:	4a05      	ldr	r2, [pc, #20]	; (8004e10 <prvInitialiseTaskLists+0x64>)
 8004dfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <prvInitialiseTaskLists+0x7c>)
 8004dfe:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <prvInitialiseTaskLists+0x68>)
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000860 	.word	0x20000860
 8004e10:	20000cc0 	.word	0x20000cc0
 8004e14:	20000cd4 	.word	0x20000cd4
 8004e18:	20000cf0 	.word	0x20000cf0
 8004e1c:	20000d04 	.word	0x20000d04
 8004e20:	20000d1c 	.word	0x20000d1c
 8004e24:	20000ce8 	.word	0x20000ce8
 8004e28:	20000cec 	.word	0x20000cec

08004e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e32:	e019      	b.n	8004e68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e34:	f000 fdd6 	bl	80059e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <prvCheckTasksWaitingTermination+0x50>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fd3b 	bl	80038c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <prvCheckTasksWaitingTermination+0x54>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <prvCheckTasksWaitingTermination+0x54>)
 8004e52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <prvCheckTasksWaitingTermination+0x58>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <prvCheckTasksWaitingTermination+0x58>)
 8004e5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e5e:	f000 fdf1 	bl	8005a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f810 	bl	8004e88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <prvCheckTasksWaitingTermination+0x58>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e1      	bne.n	8004e34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000d04 	.word	0x20000d04
 8004e80:	20000d30 	.word	0x20000d30
 8004e84:	20000d18 	.word	0x20000d18

08004e88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ff8e 	bl	8005dc0 <vPortFree>
				vPortFree( pxTCB );
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 ff8b 	bl	8005dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eaa:	e018      	b.n	8004ede <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d103      	bne.n	8004ebe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 ff82 	bl	8005dc0 <vPortFree>
	}
 8004ebc:	e00f      	b.n	8004ede <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d00a      	beq.n	8004ede <prvDeleteTCB+0x56>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60fb      	str	r3, [r7, #12]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <prvDeleteTCB+0x54>
	}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <prvResetNextTaskUnblockTime+0x38>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <prvResetNextTaskUnblockTime+0x3c>)
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f00:	e008      	b.n	8004f14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f02:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <prvResetNextTaskUnblockTime+0x38>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <prvResetNextTaskUnblockTime+0x3c>)
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	20000ce8 	.word	0x20000ce8
 8004f24:	20000d50 	.word	0x20000d50

08004f28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <xTaskGetSchedulerState+0x34>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f36:	2301      	movs	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	e008      	b.n	8004f4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <xTaskGetSchedulerState+0x38>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f44:	2302      	movs	r3, #2
 8004f46:	607b      	str	r3, [r7, #4]
 8004f48:	e001      	b.n	8004f4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f4e:	687b      	ldr	r3, [r7, #4]
	}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	20000d3c 	.word	0x20000d3c
 8004f60:	20000d58 	.word	0x20000d58

08004f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d056      	beq.n	8005028 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f7a:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <xTaskPriorityDisinherit+0xd0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d00a      	beq.n	8004f9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	60fb      	str	r3, [r7, #12]
}
 8004f96:	bf00      	nop
 8004f98:	e7fe      	b.n	8004f98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60bb      	str	r3, [r7, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d02c      	beq.n	8005028 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d128      	bne.n	8005028 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fc70 	bl	80038c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <xTaskPriorityDisinherit+0xd4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d903      	bls.n	8005008 <xTaskPriorityDisinherit+0xa4>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <xTaskPriorityDisinherit+0xd4>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a09      	ldr	r2, [pc, #36]	; (800503c <xTaskPriorityDisinherit+0xd8>)
 8005016:	441a      	add	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fe fbf1 	bl	8003806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005028:	697b      	ldr	r3, [r7, #20]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	2000085c 	.word	0x2000085c
 8005038:	20000d38 	.word	0x20000d38
 800503c:	20000860 	.word	0x20000860

08005040 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800504a:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3304      	adds	r3, #4
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fc32 	bl	80038c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d10a      	bne.n	800507a <prvAddCurrentTaskToDelayedList+0x3a>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4819      	ldr	r0, [pc, #100]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005074:	f7fe fbc7 	bl	8003806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005078:	e026      	b.n	80050c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	429a      	cmp	r2, r3
 8005090:	d209      	bcs.n	80050a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f7fe fbd5 	bl	800384e <vListInsert>
}
 80050a4:	e010      	b.n	80050c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a6:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f7fe fbcb 	bl	800384e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d202      	bcs.n	80050c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6013      	str	r3, [r2, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000d34 	.word	0x20000d34
 80050d4:	2000085c 	.word	0x2000085c
 80050d8:	20000d1c 	.word	0x20000d1c
 80050dc:	20000cec 	.word	0x20000cec
 80050e0:	20000ce8 	.word	0x20000ce8
 80050e4:	20000d50 	.word	0x20000d50

080050e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050f2:	f000 fb07 	bl	8005704 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050f6:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <xTimerCreateTimerTask+0x80>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d021      	beq.n	8005142 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005106:	1d3a      	adds	r2, r7, #4
 8005108:	f107 0108 	add.w	r1, r7, #8
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fb31 	bl	8003778 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	9202      	str	r2, [sp, #8]
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	2302      	movs	r3, #2
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	460a      	mov	r2, r1
 8005128:	4910      	ldr	r1, [pc, #64]	; (800516c <xTimerCreateTimerTask+0x84>)
 800512a:	4811      	ldr	r0, [pc, #68]	; (8005170 <xTimerCreateTimerTask+0x88>)
 800512c:	f7ff f8de 	bl	80042ec <xTaskCreateStatic>
 8005130:	4603      	mov	r3, r0
 8005132:	4a10      	ldr	r2, [pc, #64]	; (8005174 <xTimerCreateTimerTask+0x8c>)
 8005134:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <xTimerCreateTimerTask+0x8c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800513e:	2301      	movs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	613b      	str	r3, [r7, #16]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800515e:	697b      	ldr	r3, [r7, #20]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000d8c 	.word	0x20000d8c
 800516c:	080069b8 	.word	0x080069b8
 8005170:	080052ad 	.word	0x080052ad
 8005174:	20000d90 	.word	0x20000d90

08005178 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005186:	2300      	movs	r3, #0
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	623b      	str	r3, [r7, #32]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051a6:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <xTimerGenericCommand+0x98>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d02a      	beq.n	8005204 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b05      	cmp	r3, #5
 80051be:	dc18      	bgt.n	80051f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051c0:	f7ff feb2 	bl	8004f28 <xTaskGetSchedulerState>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d109      	bne.n	80051de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <xTimerGenericCommand+0x98>)
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	f107 0110 	add.w	r1, r7, #16
 80051d2:	2300      	movs	r3, #0
 80051d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d6:	f7fe fca1 	bl	8003b1c <xQueueGenericSend>
 80051da:	6278      	str	r0, [r7, #36]	; 0x24
 80051dc:	e012      	b.n	8005204 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <xTimerGenericCommand+0x98>)
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	f107 0110 	add.w	r1, r7, #16
 80051e6:	2300      	movs	r3, #0
 80051e8:	2200      	movs	r2, #0
 80051ea:	f7fe fc97 	bl	8003b1c <xQueueGenericSend>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24
 80051f0:	e008      	b.n	8005204 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <xTimerGenericCommand+0x98>)
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	f107 0110 	add.w	r1, r7, #16
 80051fa:	2300      	movs	r3, #0
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	f7fe fd8b 	bl	8003d18 <xQueueGenericSendFromISR>
 8005202:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005206:	4618      	mov	r0, r3
 8005208:	3728      	adds	r7, #40	; 0x28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000d8c 	.word	0x20000d8c

08005214 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af02      	add	r7, sp, #8
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <prvProcessExpiredTimer+0x94>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3304      	adds	r3, #4
 800522c:	4618      	mov	r0, r3
 800522e:	f7fe fb47 	bl	80038c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d022      	beq.n	8005286 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	18d1      	adds	r1, r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	6978      	ldr	r0, [r7, #20]
 800524e:	f000 f8d1 	bl	80053f4 <prvInsertTimerInActiveList>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01f      	beq.n	8005298 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005258:	2300      	movs	r3, #0
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2300      	movs	r3, #0
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	2100      	movs	r1, #0
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7ff ff88 	bl	8005178 <xTimerGenericCommand>
 8005268:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d113      	bne.n	8005298 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60fb      	str	r3, [r7, #12]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	6978      	ldr	r0, [r7, #20]
 800529e:	4798      	blx	r3
}
 80052a0:	bf00      	nop
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000d84 	.word	0x20000d84

080052ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f857 	bl	800536c <prvGetNextExpireTime>
 80052be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4619      	mov	r1, r3
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f803 	bl	80052d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052ca:	f000 f8d5 	bl	8005478 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ce:	e7f1      	b.n	80052b4 <prvTimerTask+0x8>

080052d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052da:	f7ff fa43 	bl	8004764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f866 	bl	80053b4 <prvSampleTimeNow>
 80052e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d130      	bne.n	8005352 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <prvProcessTimerOrBlockTask+0x3c>
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d806      	bhi.n	800530c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052fe:	f7ff fa3f 	bl	8004780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff85 	bl	8005214 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800530a:	e024      	b.n	8005356 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <prvProcessTimerOrBlockTask+0x90>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <prvProcessTimerOrBlockTask+0x50>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <prvProcessTimerOrBlockTask+0x52>
 8005320:	2300      	movs	r3, #0
 8005322:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <prvProcessTimerOrBlockTask+0x94>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4619      	mov	r1, r3
 8005332:	f7fe ffa7 	bl	8004284 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005336:	f7ff fa23 	bl	8004780 <xTaskResumeAll>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <prvProcessTimerOrBlockTask+0x98>)
 8005342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
}
 8005350:	e001      	b.n	8005356 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005352:	f7ff fa15 	bl	8004780 <xTaskResumeAll>
}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000d88 	.word	0x20000d88
 8005364:	20000d8c 	.word	0x20000d8c
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <prvGetNextExpireTime+0x44>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <prvGetNextExpireTime+0x16>
 800537e:	2201      	movs	r2, #1
 8005380:	e000      	b.n	8005384 <prvGetNextExpireTime+0x18>
 8005382:	2200      	movs	r2, #0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d105      	bne.n	800539c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <prvGetNextExpireTime+0x44>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e001      	b.n	80053a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000d84 	.word	0x20000d84

080053b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053bc:	f7ff fa7e 	bl	80048bc <xTaskGetTickCount>
 80053c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <prvSampleTimeNow+0x3c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d205      	bcs.n	80053d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053cc:	f000 f936 	bl	800563c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e002      	b.n	80053de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053de:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <prvSampleTimeNow+0x3c>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053e4:	68fb      	ldr	r3, [r7, #12]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000d94 	.word	0x20000d94

080053f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d812      	bhi.n	8005440 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005428:	2301      	movs	r3, #1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e01b      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <prvInsertTimerInActiveList+0x7c>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7fe fa08 	bl	800384e <vListInsert>
 800543e:	e012      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d206      	bcs.n	8005456 <prvInsertTimerInActiveList+0x62>
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e007      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005456:	4b07      	ldr	r3, [pc, #28]	; (8005474 <prvInsertTimerInActiveList+0x80>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3304      	adds	r3, #4
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f7fe f9f4 	bl	800384e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000d88 	.word	0x20000d88
 8005474:	20000d84 	.word	0x20000d84

08005478 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08e      	sub	sp, #56	; 0x38
 800547c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800547e:	e0ca      	b.n	8005616 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	da18      	bge.n	80054b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	3304      	adds	r3, #4
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61fb      	str	r3, [r7, #28]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ae:	6850      	ldr	r0, [r2, #4]
 80054b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b2:	6892      	ldr	r2, [r2, #8]
 80054b4:	4611      	mov	r1, r2
 80054b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f2c0 80aa 	blt.w	8005614 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	3304      	adds	r3, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe f9f5 	bl	80038c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054d6:	463b      	mov	r3, r7
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff ff6b 	bl	80053b4 <prvSampleTimeNow>
 80054de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b09      	cmp	r3, #9
 80054e4:	f200 8097 	bhi.w	8005616 <prvProcessReceivedCommands+0x19e>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <prvProcessReceivedCommands+0x78>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005519 	.word	0x08005519
 80054fc:	0800558d 	.word	0x0800558d
 8005500:	080055a1 	.word	0x080055a1
 8005504:	080055eb 	.word	0x080055eb
 8005508:	08005519 	.word	0x08005519
 800550c:	08005519 	.word	0x08005519
 8005510:	0800558d 	.word	0x0800558d
 8005514:	080055a1 	.word	0x080055a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	18d1      	adds	r1, r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005538:	f7ff ff5c 	bl	80053f4 <prvInsertTimerInActiveList>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d069      	beq.n	8005616 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005548:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05e      	beq.n	8005616 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	441a      	add	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	2100      	movs	r1, #0
 8005568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556a:	f7ff fe05 	bl	8005178 <xTimerGenericCommand>
 800556e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d14f      	bne.n	8005616 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	61bb      	str	r3, [r7, #24]
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800559e:	e03a      	b.n	8005616 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	617b      	str	r3, [r7, #20]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	18d1      	adds	r1, r2, r3
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e4:	f7ff ff06 	bl	80053f4 <prvInsertTimerInActiveList>
					break;
 80055e8:	e015      	b.n	8005616 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80055f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fa:	f000 fbe1 	bl	8005dc0 <vPortFree>
 80055fe:	e00a      	b.n	8005616 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005606:	f023 0301 	bic.w	r3, r3, #1
 800560a:	b2da      	uxtb	r2, r3
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005612:	e000      	b.n	8005616 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005614:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005616:	4b08      	ldr	r3, [pc, #32]	; (8005638 <prvProcessReceivedCommands+0x1c0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	1d39      	adds	r1, r7, #4
 800561c:	2200      	movs	r2, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe fc16 	bl	8003e50 <xQueueReceive>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	f47f af2a 	bne.w	8005480 <prvProcessReceivedCommands+0x8>
	}
}
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	3730      	adds	r7, #48	; 0x30
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000d8c 	.word	0x20000d8c

0800563c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005642:	e048      	b.n	80056d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <prvSwitchTimerLists+0xc0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564e:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <prvSwitchTimerLists+0xc0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3304      	adds	r3, #4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe f92f 	bl	80038c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d02e      	beq.n	80056d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d90e      	bls.n	80056a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <prvSwitchTimerLists+0xc0>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f7fe f8d4 	bl	800384e <vListInsert>
 80056a6:	e016      	b.n	80056d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a8:	2300      	movs	r3, #0
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	2300      	movs	r3, #0
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	2100      	movs	r1, #0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff fd60 	bl	8005178 <xTimerGenericCommand>
 80056b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	603b      	str	r3, [r7, #0]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <prvSwitchTimerLists+0xc0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1b1      	bne.n	8005644 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <prvSwitchTimerLists+0xc0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <prvSwitchTimerLists+0xc4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a04      	ldr	r2, [pc, #16]	; (80056fc <prvSwitchTimerLists+0xc0>)
 80056ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056ee:	4a04      	ldr	r2, [pc, #16]	; (8005700 <prvSwitchTimerLists+0xc4>)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	6013      	str	r3, [r2, #0]
}
 80056f4:	bf00      	nop
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000d84 	.word	0x20000d84
 8005700:	20000d88 	.word	0x20000d88

08005704 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800570a:	f000 f96b 	bl	80059e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <prvCheckForValidListAndQueue+0x60>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d120      	bne.n	8005758 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005716:	4814      	ldr	r0, [pc, #80]	; (8005768 <prvCheckForValidListAndQueue+0x64>)
 8005718:	f7fe f848 	bl	80037ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800571c:	4813      	ldr	r0, [pc, #76]	; (800576c <prvCheckForValidListAndQueue+0x68>)
 800571e:	f7fe f845 	bl	80037ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <prvCheckForValidListAndQueue+0x6c>)
 8005724:	4a10      	ldr	r2, [pc, #64]	; (8005768 <prvCheckForValidListAndQueue+0x64>)
 8005726:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005728:	4b12      	ldr	r3, [pc, #72]	; (8005774 <prvCheckForValidListAndQueue+0x70>)
 800572a:	4a10      	ldr	r2, [pc, #64]	; (800576c <prvCheckForValidListAndQueue+0x68>)
 800572c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800572e:	2300      	movs	r3, #0
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <prvCheckForValidListAndQueue+0x74>)
 8005734:	4a11      	ldr	r2, [pc, #68]	; (800577c <prvCheckForValidListAndQueue+0x78>)
 8005736:	2110      	movs	r1, #16
 8005738:	200a      	movs	r0, #10
 800573a:	f7fe f953 	bl	80039e4 <xQueueGenericCreateStatic>
 800573e:	4603      	mov	r3, r0
 8005740:	4a08      	ldr	r2, [pc, #32]	; (8005764 <prvCheckForValidListAndQueue+0x60>)
 8005742:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <prvCheckForValidListAndQueue+0x60>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <prvCheckForValidListAndQueue+0x60>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	490b      	ldr	r1, [pc, #44]	; (8005780 <prvCheckForValidListAndQueue+0x7c>)
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fd6c 	bl	8004230 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005758:	f000 f974 	bl	8005a44 <vPortExitCritical>
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000d8c 	.word	0x20000d8c
 8005768:	20000d5c 	.word	0x20000d5c
 800576c:	20000d70 	.word	0x20000d70
 8005770:	20000d84 	.word	0x20000d84
 8005774:	20000d88 	.word	0x20000d88
 8005778:	20000e38 	.word	0x20000e38
 800577c:	20000d98 	.word	0x20000d98
 8005780:	080069c0 	.word	0x080069c0

08005784 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3b04      	subs	r3, #4
 8005794:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800579c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057b4:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <pxPortInitialiseStack+0x64>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b14      	subs	r3, #20
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f06f 0202 	mvn.w	r2, #2
 80057d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b20      	subs	r3, #32
 80057d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	080057ed 	.word	0x080057ed

080057ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <prvTaskExitError+0x54>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d00a      	beq.n	8005816 <prvTaskExitError+0x2a>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <prvTaskExitError+0x28>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800582a:	bf00      	nop
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0fc      	beq.n	800582c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	2000000c 	.word	0x2000000c
	...

08005850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <pxCurrentTCBConst2>)
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585a:	f380 8809 	msr	PSP, r0
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8811 	msr	BASEPRI, r0
 800586a:	4770      	bx	lr
 800586c:	f3af 8000 	nop.w

08005870 <pxCurrentTCBConst2>:
 8005870:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005878:	4808      	ldr	r0, [pc, #32]	; (800589c <prvPortStartFirstTask+0x24>)
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	6800      	ldr	r0, [r0, #0]
 800587e:	f380 8808 	msr	MSP, r0
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8814 	msr	CONTROL, r0
 800588a:	b662      	cpsie	i
 800588c:	b661      	cpsie	f
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	df00      	svc	0
 8005898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800589a:	bf00      	nop
 800589c:	e000ed08 	.word	0xe000ed08

080058a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058a6:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <xPortStartScheduler+0x120>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a46      	ldr	r2, [pc, #280]	; (80059c4 <xPortStartScheduler+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10a      	bne.n	80058c6 <xPortStartScheduler+0x26>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <xPortStartScheduler+0x120>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3f      	ldr	r2, [pc, #252]	; (80059c8 <xPortStartScheduler+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10a      	bne.n	80058e6 <xPortStartScheduler+0x46>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <xPortStartScheduler+0x12c>)
 80058e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4b31      	ldr	r3, [pc, #196]	; (80059d0 <xPortStartScheduler+0x130>)
 800590c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800590e:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <xPortStartScheduler+0x134>)
 8005910:	2207      	movs	r2, #7
 8005912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005914:	e009      	b.n	800592a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005916:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <xPortStartScheduler+0x134>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	4a2d      	ldr	r2, [pc, #180]	; (80059d4 <xPortStartScheduler+0x134>)
 800591e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b2db      	uxtb	r3, r3
 8005928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d0ef      	beq.n	8005916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005936:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <xPortStartScheduler+0x134>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00a      	beq.n	8005958 <xPortStartScheduler+0xb8>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <xPortStartScheduler+0x134>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <xPortStartScheduler+0x134>)
 8005960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <xPortStartScheduler+0x134>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800596a:	4a1a      	ldr	r2, [pc, #104]	; (80059d4 <xPortStartScheduler+0x134>)
 800596c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005976:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <xPortStartScheduler+0x138>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <xPortStartScheduler+0x138>)
 800597c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005982:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <xPortStartScheduler+0x138>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <xPortStartScheduler+0x138>)
 8005988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800598c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800598e:	f000 f8dd 	bl	8005b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <xPortStartScheduler+0x13c>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005998:	f000 f8fc 	bl	8005b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <xPortStartScheduler+0x140>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0f      	ldr	r2, [pc, #60]	; (80059e0 <xPortStartScheduler+0x140>)
 80059a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059a8:	f7ff ff66 	bl	8005878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ac:	f7ff f850 	bl	8004a50 <vTaskSwitchContext>
	prvTaskExitError();
 80059b0:	f7ff ff1c 	bl	80057ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000ed00 	.word	0xe000ed00
 80059c4:	410fc271 	.word	0x410fc271
 80059c8:	410fc270 	.word	0x410fc270
 80059cc:	e000e400 	.word	0xe000e400
 80059d0:	20000e88 	.word	0x20000e88
 80059d4:	20000e8c 	.word	0x20000e8c
 80059d8:	e000ed20 	.word	0xe000ed20
 80059dc:	2000000c 	.word	0x2000000c
 80059e0:	e000ef34 	.word	0xe000ef34

080059e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	607b      	str	r3, [r7, #4]
}
 80059fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a0d      	ldr	r2, [pc, #52]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <vPortEnterCritical+0x58>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10f      	bne.n	8005a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <vPortEnterCritical+0x5c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	603b      	str	r3, [r7, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <vPortEnterCritical+0x4a>
	}
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	e000ed04 	.word	0xe000ed04

08005a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <vPortExitCritical+0x50>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <vPortExitCritical+0x24>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	607b      	str	r3, [r7, #4]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <vPortExitCritical+0x50>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <vPortExitCritical+0x50>)
 8005a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <vPortExitCritical+0x42>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f383 8811 	msr	BASEPRI, r3
}
 8005a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000000c 	.word	0x2000000c
	...

08005aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005aa0:	f3ef 8009 	mrs	r0, PSP
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <pxCurrentTCBConst>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f01e 0f10 	tst.w	lr, #16
 8005ab0:	bf08      	it	eq
 8005ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aba:	6010      	str	r0, [r2, #0]
 8005abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ac4:	f380 8811 	msr	BASEPRI, r0
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f7fe ffbe 	bl	8004a50 <vTaskSwitchContext>
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	f380 8811 	msr	BASEPRI, r0
 8005adc:	bc09      	pop	{r0, r3}
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	6808      	ldr	r0, [r1, #0]
 8005ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae6:	f01e 0f10 	tst.w	lr, #16
 8005aea:	bf08      	it	eq
 8005aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005af0:	f380 8809 	msr	PSP, r0
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	f3af 8000 	nop.w

08005b00 <pxCurrentTCBConst>:
 8005b00:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop

08005b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
}
 8005b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b22:	f7fe fedb 	bl	80048dc <xTaskIncrementTick>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <xPortSysTickHandler+0x40>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <vPortSetupTimerInterrupt+0x38>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <vPortSetupTimerInterrupt+0x3c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <vPortSetupTimerInterrupt+0x40>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <vPortSetupTimerInterrupt+0x44>)
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b70:	2207      	movs	r2, #7
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	e000e010 	.word	0xe000e010
 8005b84:	e000e018 	.word	0xe000e018
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	10624dd3 	.word	0x10624dd3
 8005b90:	e000e014 	.word	0xe000e014

08005b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ba4 <vPortEnableVFP+0x10>
 8005b98:	6801      	ldr	r1, [r0, #0]
 8005b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b9e:	6001      	str	r1, [r0, #0]
 8005ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ba2:	bf00      	nop
 8005ba4:	e000ed88 	.word	0xe000ed88

08005ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bae:	f3ef 8305 	mrs	r3, IPSR
 8005bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d914      	bls.n	8005be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <vPortValidateInterruptPriority+0x70>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bc4:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <vPortValidateInterruptPriority+0x74>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	7afa      	ldrb	r2, [r7, #11]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d20a      	bcs.n	8005be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005be4:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <vPortValidateInterruptPriority+0x78>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <vPortValidateInterruptPriority+0x7c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d90a      	bls.n	8005c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	603b      	str	r3, [r7, #0]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <vPortValidateInterruptPriority+0x60>
	}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e3f0 	.word	0xe000e3f0
 8005c1c:	20000e88 	.word	0x20000e88
 8005c20:	e000ed0c 	.word	0xe000ed0c
 8005c24:	20000e8c 	.word	0x20000e8c

08005c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c34:	f7fe fd96 	bl	8004764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c38:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <pvPortMalloc+0x180>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c40:	f000 f920 	bl	8005e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c44:	4b59      	ldr	r3, [pc, #356]	; (8005dac <pvPortMalloc+0x184>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8093 	bne.w	8005d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01d      	beq.n	8005c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c58:	2208      	movs	r2, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f023 0307 	bic.w	r3, r3, #7
 8005c70:	3308      	adds	r3, #8
 8005c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <pvPortMalloc+0x6c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	617b      	str	r3, [r7, #20]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d06e      	beq.n	8005d78 <pvPortMalloc+0x150>
 8005c9a:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <pvPortMalloc+0x188>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d869      	bhi.n	8005d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ca4:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <pvPortMalloc+0x18c>)
 8005ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ca8:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <pvPortMalloc+0x18c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cae:	e004      	b.n	8005cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d903      	bls.n	8005ccc <pvPortMalloc+0xa4>
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f1      	bne.n	8005cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ccc:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <pvPortMalloc+0x180>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d050      	beq.n	8005d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2208      	movs	r2, #8
 8005cdc:	4413      	add	r3, r2
 8005cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d91f      	bls.n	8005d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <pvPortMalloc+0xf8>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	613b      	str	r3, [r7, #16]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d32:	69b8      	ldr	r0, [r7, #24]
 8005d34:	f000 f908 	bl	8005f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <pvPortMalloc+0x188>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <pvPortMalloc+0x188>)
 8005d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d46:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <pvPortMalloc+0x188>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <pvPortMalloc+0x190>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d203      	bcs.n	8005d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d52:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <pvPortMalloc+0x188>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <pvPortMalloc+0x190>)
 8005d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <pvPortMalloc+0x184>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x194>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <pvPortMalloc+0x194>)
 8005d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d78:	f7fe fd02 	bl	8004780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <pvPortMalloc+0x174>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60fb      	str	r3, [r7, #12]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <pvPortMalloc+0x172>
	return pvReturn;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3728      	adds	r7, #40	; 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20004a98 	.word	0x20004a98
 8005dac:	20004aac 	.word	0x20004aac
 8005db0:	20004a9c 	.word	0x20004a9c
 8005db4:	20004a90 	.word	0x20004a90
 8005db8:	20004aa0 	.word	0x20004aa0
 8005dbc:	20004aa4 	.word	0x20004aa4

08005dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d04d      	beq.n	8005e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <vPortFree+0xb8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <vPortFree+0x44>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60fb      	str	r3, [r7, #12]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <vPortFree+0x62>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60bb      	str	r3, [r7, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <vPortFree+0xb8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01e      	beq.n	8005e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d11a      	bne.n	8005e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <vPortFree+0xb8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e48:	f7fe fc8c 	bl	8004764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <vPortFree+0xbc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <vPortFree+0xbc>)
 8005e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e5a:	6938      	ldr	r0, [r7, #16]
 8005e5c:	f000 f874 	bl	8005f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <vPortFree+0xc0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <vPortFree+0xc0>)
 8005e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e6a:	f7fe fc89 	bl	8004780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20004aac 	.word	0x20004aac
 8005e7c:	20004a9c 	.word	0x20004a9c
 8005e80:	20004aa8 	.word	0x20004aa8

08005e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e90:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <prvHeapInit+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0307 	bic.w	r3, r3, #7
 8005eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <prvHeapInit+0xac>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <prvHeapInit+0xb0>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <prvHeapInit+0xb0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <prvHeapInit+0xb4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <prvHeapInit+0xb4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvHeapInit+0xb4>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <prvHeapInit+0xb8>)
 8005f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <prvHeapInit+0xbc>)
 8005f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <prvHeapInit+0xc0>)
 8005f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	20000e90 	.word	0x20000e90
 8005f34:	20004a90 	.word	0x20004a90
 8005f38:	20004a98 	.word	0x20004a98
 8005f3c:	20004aa0 	.word	0x20004aa0
 8005f40:	20004a9c 	.word	0x20004a9c
 8005f44:	20004aac 	.word	0x20004aac

08005f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <prvInsertBlockIntoFreeList+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <prvInsertBlockIntoFreeList+0x14>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d8f7      	bhi.n	8005f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d108      	bne.n	8005f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d118      	bne.n	8005fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d00d      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	e008      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e003      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d002      	beq.n	8005fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20004a90 	.word	0x20004a90
 8005ff8:	20004a98 	.word	0x20004a98

08005ffc <__errno>:
 8005ffc:	4b01      	ldr	r3, [pc, #4]	; (8006004 <__errno+0x8>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000010 	.word	0x20000010

08006008 <__libc_init_array>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	4d0d      	ldr	r5, [pc, #52]	; (8006040 <__libc_init_array+0x38>)
 800600c:	4c0d      	ldr	r4, [pc, #52]	; (8006044 <__libc_init_array+0x3c>)
 800600e:	1b64      	subs	r4, r4, r5
 8006010:	10a4      	asrs	r4, r4, #2
 8006012:	2600      	movs	r6, #0
 8006014:	42a6      	cmp	r6, r4
 8006016:	d109      	bne.n	800602c <__libc_init_array+0x24>
 8006018:	4d0b      	ldr	r5, [pc, #44]	; (8006048 <__libc_init_array+0x40>)
 800601a:	4c0c      	ldr	r4, [pc, #48]	; (800604c <__libc_init_array+0x44>)
 800601c:	f000 fc8e 	bl	800693c <_init>
 8006020:	1b64      	subs	r4, r4, r5
 8006022:	10a4      	asrs	r4, r4, #2
 8006024:	2600      	movs	r6, #0
 8006026:	42a6      	cmp	r6, r4
 8006028:	d105      	bne.n	8006036 <__libc_init_array+0x2e>
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006030:	4798      	blx	r3
 8006032:	3601      	adds	r6, #1
 8006034:	e7ee      	b.n	8006014 <__libc_init_array+0xc>
 8006036:	f855 3b04 	ldr.w	r3, [r5], #4
 800603a:	4798      	blx	r3
 800603c:	3601      	adds	r6, #1
 800603e:	e7f2      	b.n	8006026 <__libc_init_array+0x1e>
 8006040:	08006a88 	.word	0x08006a88
 8006044:	08006a88 	.word	0x08006a88
 8006048:	08006a88 	.word	0x08006a88
 800604c:	08006a8c 	.word	0x08006a8c

08006050 <memcpy>:
 8006050:	440a      	add	r2, r1
 8006052:	4291      	cmp	r1, r2
 8006054:	f100 33ff 	add.w	r3, r0, #4294967295
 8006058:	d100      	bne.n	800605c <memcpy+0xc>
 800605a:	4770      	bx	lr
 800605c:	b510      	push	{r4, lr}
 800605e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006066:	4291      	cmp	r1, r2
 8006068:	d1f9      	bne.n	800605e <memcpy+0xe>
 800606a:	bd10      	pop	{r4, pc}

0800606c <memset>:
 800606c:	4402      	add	r2, r0
 800606e:	4603      	mov	r3, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <siprintf>:
 800607c:	b40e      	push	{r1, r2, r3}
 800607e:	b500      	push	{lr}
 8006080:	b09c      	sub	sp, #112	; 0x70
 8006082:	ab1d      	add	r3, sp, #116	; 0x74
 8006084:	9002      	str	r0, [sp, #8]
 8006086:	9006      	str	r0, [sp, #24]
 8006088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800608c:	4809      	ldr	r0, [pc, #36]	; (80060b4 <siprintf+0x38>)
 800608e:	9107      	str	r1, [sp, #28]
 8006090:	9104      	str	r1, [sp, #16]
 8006092:	4909      	ldr	r1, [pc, #36]	; (80060b8 <siprintf+0x3c>)
 8006094:	f853 2b04 	ldr.w	r2, [r3], #4
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	a902      	add	r1, sp, #8
 80060a0:	f000 f868 	bl	8006174 <_svfiprintf_r>
 80060a4:	9b02      	ldr	r3, [sp, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	b01c      	add	sp, #112	; 0x70
 80060ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b0:	b003      	add	sp, #12
 80060b2:	4770      	bx	lr
 80060b4:	20000010 	.word	0x20000010
 80060b8:	ffff0208 	.word	0xffff0208

080060bc <__ssputs_r>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	688e      	ldr	r6, [r1, #8]
 80060c2:	429e      	cmp	r6, r3
 80060c4:	4682      	mov	sl, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	4690      	mov	r8, r2
 80060ca:	461f      	mov	r7, r3
 80060cc:	d838      	bhi.n	8006140 <__ssputs_r+0x84>
 80060ce:	898a      	ldrh	r2, [r1, #12]
 80060d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060d4:	d032      	beq.n	800613c <__ssputs_r+0x80>
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	6909      	ldr	r1, [r1, #16]
 80060da:	eba5 0901 	sub.w	r9, r5, r1
 80060de:	6965      	ldr	r5, [r4, #20]
 80060e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060e8:	3301      	adds	r3, #1
 80060ea:	444b      	add	r3, r9
 80060ec:	106d      	asrs	r5, r5, #1
 80060ee:	429d      	cmp	r5, r3
 80060f0:	bf38      	it	cc
 80060f2:	461d      	movcc	r5, r3
 80060f4:	0553      	lsls	r3, r2, #21
 80060f6:	d531      	bpl.n	800615c <__ssputs_r+0xa0>
 80060f8:	4629      	mov	r1, r5
 80060fa:	f000 fb55 	bl	80067a8 <_malloc_r>
 80060fe:	4606      	mov	r6, r0
 8006100:	b950      	cbnz	r0, 8006118 <__ssputs_r+0x5c>
 8006102:	230c      	movs	r3, #12
 8006104:	f8ca 3000 	str.w	r3, [sl]
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006118:	6921      	ldr	r1, [r4, #16]
 800611a:	464a      	mov	r2, r9
 800611c:	f7ff ff98 	bl	8006050 <memcpy>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	6126      	str	r6, [r4, #16]
 800612e:	6165      	str	r5, [r4, #20]
 8006130:	444e      	add	r6, r9
 8006132:	eba5 0509 	sub.w	r5, r5, r9
 8006136:	6026      	str	r6, [r4, #0]
 8006138:	60a5      	str	r5, [r4, #8]
 800613a:	463e      	mov	r6, r7
 800613c:	42be      	cmp	r6, r7
 800613e:	d900      	bls.n	8006142 <__ssputs_r+0x86>
 8006140:	463e      	mov	r6, r7
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	4632      	mov	r2, r6
 8006146:	4641      	mov	r1, r8
 8006148:	f000 faa8 	bl	800669c <memmove>
 800614c:	68a3      	ldr	r3, [r4, #8]
 800614e:	1b9b      	subs	r3, r3, r6
 8006150:	60a3      	str	r3, [r4, #8]
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	4433      	add	r3, r6
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	2000      	movs	r0, #0
 800615a:	e7db      	b.n	8006114 <__ssputs_r+0x58>
 800615c:	462a      	mov	r2, r5
 800615e:	f000 fb97 	bl	8006890 <_realloc_r>
 8006162:	4606      	mov	r6, r0
 8006164:	2800      	cmp	r0, #0
 8006166:	d1e1      	bne.n	800612c <__ssputs_r+0x70>
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	4650      	mov	r0, sl
 800616c:	f000 fab0 	bl	80066d0 <_free_r>
 8006170:	e7c7      	b.n	8006102 <__ssputs_r+0x46>
	...

08006174 <_svfiprintf_r>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	4698      	mov	r8, r3
 800617a:	898b      	ldrh	r3, [r1, #12]
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	b09d      	sub	sp, #116	; 0x74
 8006180:	4607      	mov	r7, r0
 8006182:	460d      	mov	r5, r1
 8006184:	4614      	mov	r4, r2
 8006186:	d50e      	bpl.n	80061a6 <_svfiprintf_r+0x32>
 8006188:	690b      	ldr	r3, [r1, #16]
 800618a:	b963      	cbnz	r3, 80061a6 <_svfiprintf_r+0x32>
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	f000 fb0b 	bl	80067a8 <_malloc_r>
 8006192:	6028      	str	r0, [r5, #0]
 8006194:	6128      	str	r0, [r5, #16]
 8006196:	b920      	cbnz	r0, 80061a2 <_svfiprintf_r+0x2e>
 8006198:	230c      	movs	r3, #12
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	e0d1      	b.n	8006346 <_svfiprintf_r+0x1d2>
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	616b      	str	r3, [r5, #20]
 80061a6:	2300      	movs	r3, #0
 80061a8:	9309      	str	r3, [sp, #36]	; 0x24
 80061aa:	2320      	movs	r3, #32
 80061ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b4:	2330      	movs	r3, #48	; 0x30
 80061b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006360 <_svfiprintf_r+0x1ec>
 80061ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061be:	f04f 0901 	mov.w	r9, #1
 80061c2:	4623      	mov	r3, r4
 80061c4:	469a      	mov	sl, r3
 80061c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ca:	b10a      	cbz	r2, 80061d0 <_svfiprintf_r+0x5c>
 80061cc:	2a25      	cmp	r2, #37	; 0x25
 80061ce:	d1f9      	bne.n	80061c4 <_svfiprintf_r+0x50>
 80061d0:	ebba 0b04 	subs.w	fp, sl, r4
 80061d4:	d00b      	beq.n	80061ee <_svfiprintf_r+0x7a>
 80061d6:	465b      	mov	r3, fp
 80061d8:	4622      	mov	r2, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ff6d 	bl	80060bc <__ssputs_r>
 80061e2:	3001      	adds	r0, #1
 80061e4:	f000 80aa 	beq.w	800633c <_svfiprintf_r+0x1c8>
 80061e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ea:	445a      	add	r2, fp
 80061ec:	9209      	str	r2, [sp, #36]	; 0x24
 80061ee:	f89a 3000 	ldrb.w	r3, [sl]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80a2 	beq.w	800633c <_svfiprintf_r+0x1c8>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f04f 32ff 	mov.w	r2, #4294967295
 80061fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006202:	f10a 0a01 	add.w	sl, sl, #1
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	9307      	str	r3, [sp, #28]
 800620a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800620e:	931a      	str	r3, [sp, #104]	; 0x68
 8006210:	4654      	mov	r4, sl
 8006212:	2205      	movs	r2, #5
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	4851      	ldr	r0, [pc, #324]	; (8006360 <_svfiprintf_r+0x1ec>)
 800621a:	f7f9 ffe1 	bl	80001e0 <memchr>
 800621e:	9a04      	ldr	r2, [sp, #16]
 8006220:	b9d8      	cbnz	r0, 800625a <_svfiprintf_r+0xe6>
 8006222:	06d0      	lsls	r0, r2, #27
 8006224:	bf44      	itt	mi
 8006226:	2320      	movmi	r3, #32
 8006228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800622c:	0711      	lsls	r1, r2, #28
 800622e:	bf44      	itt	mi
 8006230:	232b      	movmi	r3, #43	; 0x2b
 8006232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006236:	f89a 3000 	ldrb.w	r3, [sl]
 800623a:	2b2a      	cmp	r3, #42	; 0x2a
 800623c:	d015      	beq.n	800626a <_svfiprintf_r+0xf6>
 800623e:	9a07      	ldr	r2, [sp, #28]
 8006240:	4654      	mov	r4, sl
 8006242:	2000      	movs	r0, #0
 8006244:	f04f 0c0a 	mov.w	ip, #10
 8006248:	4621      	mov	r1, r4
 800624a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800624e:	3b30      	subs	r3, #48	; 0x30
 8006250:	2b09      	cmp	r3, #9
 8006252:	d94e      	bls.n	80062f2 <_svfiprintf_r+0x17e>
 8006254:	b1b0      	cbz	r0, 8006284 <_svfiprintf_r+0x110>
 8006256:	9207      	str	r2, [sp, #28]
 8006258:	e014      	b.n	8006284 <_svfiprintf_r+0x110>
 800625a:	eba0 0308 	sub.w	r3, r0, r8
 800625e:	fa09 f303 	lsl.w	r3, r9, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	46a2      	mov	sl, r4
 8006268:	e7d2      	b.n	8006210 <_svfiprintf_r+0x9c>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	1d19      	adds	r1, r3, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	9103      	str	r1, [sp, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfbb      	ittet	lt
 8006276:	425b      	neglt	r3, r3
 8006278:	f042 0202 	orrlt.w	r2, r2, #2
 800627c:	9307      	strge	r3, [sp, #28]
 800627e:	9307      	strlt	r3, [sp, #28]
 8006280:	bfb8      	it	lt
 8006282:	9204      	strlt	r2, [sp, #16]
 8006284:	7823      	ldrb	r3, [r4, #0]
 8006286:	2b2e      	cmp	r3, #46	; 0x2e
 8006288:	d10c      	bne.n	80062a4 <_svfiprintf_r+0x130>
 800628a:	7863      	ldrb	r3, [r4, #1]
 800628c:	2b2a      	cmp	r3, #42	; 0x2a
 800628e:	d135      	bne.n	80062fc <_svfiprintf_r+0x188>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	9203      	str	r2, [sp, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfb8      	it	lt
 800629c:	f04f 33ff 	movlt.w	r3, #4294967295
 80062a0:	3402      	adds	r4, #2
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006370 <_svfiprintf_r+0x1fc>
 80062a8:	7821      	ldrb	r1, [r4, #0]
 80062aa:	2203      	movs	r2, #3
 80062ac:	4650      	mov	r0, sl
 80062ae:	f7f9 ff97 	bl	80001e0 <memchr>
 80062b2:	b140      	cbz	r0, 80062c6 <_svfiprintf_r+0x152>
 80062b4:	2340      	movs	r3, #64	; 0x40
 80062b6:	eba0 000a 	sub.w	r0, r0, sl
 80062ba:	fa03 f000 	lsl.w	r0, r3, r0
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	4303      	orrs	r3, r0
 80062c2:	3401      	adds	r4, #1
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ca:	4826      	ldr	r0, [pc, #152]	; (8006364 <_svfiprintf_r+0x1f0>)
 80062cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d0:	2206      	movs	r2, #6
 80062d2:	f7f9 ff85 	bl	80001e0 <memchr>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d038      	beq.n	800634c <_svfiprintf_r+0x1d8>
 80062da:	4b23      	ldr	r3, [pc, #140]	; (8006368 <_svfiprintf_r+0x1f4>)
 80062dc:	bb1b      	cbnz	r3, 8006326 <_svfiprintf_r+0x1b2>
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	3307      	adds	r3, #7
 80062e2:	f023 0307 	bic.w	r3, r3, #7
 80062e6:	3308      	adds	r3, #8
 80062e8:	9303      	str	r3, [sp, #12]
 80062ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ec:	4433      	add	r3, r6
 80062ee:	9309      	str	r3, [sp, #36]	; 0x24
 80062f0:	e767      	b.n	80061c2 <_svfiprintf_r+0x4e>
 80062f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f6:	460c      	mov	r4, r1
 80062f8:	2001      	movs	r0, #1
 80062fa:	e7a5      	b.n	8006248 <_svfiprintf_r+0xd4>
 80062fc:	2300      	movs	r3, #0
 80062fe:	3401      	adds	r4, #1
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	4619      	mov	r1, r3
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	4620      	mov	r0, r4
 800630a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800630e:	3a30      	subs	r2, #48	; 0x30
 8006310:	2a09      	cmp	r2, #9
 8006312:	d903      	bls.n	800631c <_svfiprintf_r+0x1a8>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0c5      	beq.n	80062a4 <_svfiprintf_r+0x130>
 8006318:	9105      	str	r1, [sp, #20]
 800631a:	e7c3      	b.n	80062a4 <_svfiprintf_r+0x130>
 800631c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006320:	4604      	mov	r4, r0
 8006322:	2301      	movs	r3, #1
 8006324:	e7f0      	b.n	8006308 <_svfiprintf_r+0x194>
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <_svfiprintf_r+0x1f8>)
 800632e:	a904      	add	r1, sp, #16
 8006330:	4638      	mov	r0, r7
 8006332:	f3af 8000 	nop.w
 8006336:	1c42      	adds	r2, r0, #1
 8006338:	4606      	mov	r6, r0
 800633a:	d1d6      	bne.n	80062ea <_svfiprintf_r+0x176>
 800633c:	89ab      	ldrh	r3, [r5, #12]
 800633e:	065b      	lsls	r3, r3, #25
 8006340:	f53f af2c 	bmi.w	800619c <_svfiprintf_r+0x28>
 8006344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006346:	b01d      	add	sp, #116	; 0x74
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	ab03      	add	r3, sp, #12
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	462a      	mov	r2, r5
 8006352:	4b06      	ldr	r3, [pc, #24]	; (800636c <_svfiprintf_r+0x1f8>)
 8006354:	a904      	add	r1, sp, #16
 8006356:	4638      	mov	r0, r7
 8006358:	f000 f87a 	bl	8006450 <_printf_i>
 800635c:	e7eb      	b.n	8006336 <_svfiprintf_r+0x1c2>
 800635e:	bf00      	nop
 8006360:	08006a4c 	.word	0x08006a4c
 8006364:	08006a56 	.word	0x08006a56
 8006368:	00000000 	.word	0x00000000
 800636c:	080060bd 	.word	0x080060bd
 8006370:	08006a52 	.word	0x08006a52

08006374 <_printf_common>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	4616      	mov	r6, r2
 800637a:	4699      	mov	r9, r3
 800637c:	688a      	ldr	r2, [r1, #8]
 800637e:	690b      	ldr	r3, [r1, #16]
 8006380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006384:	4293      	cmp	r3, r2
 8006386:	bfb8      	it	lt
 8006388:	4613      	movlt	r3, r2
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006390:	4607      	mov	r7, r0
 8006392:	460c      	mov	r4, r1
 8006394:	b10a      	cbz	r2, 800639a <_printf_common+0x26>
 8006396:	3301      	adds	r3, #1
 8006398:	6033      	str	r3, [r6, #0]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	0699      	lsls	r1, r3, #26
 800639e:	bf42      	ittt	mi
 80063a0:	6833      	ldrmi	r3, [r6, #0]
 80063a2:	3302      	addmi	r3, #2
 80063a4:	6033      	strmi	r3, [r6, #0]
 80063a6:	6825      	ldr	r5, [r4, #0]
 80063a8:	f015 0506 	ands.w	r5, r5, #6
 80063ac:	d106      	bne.n	80063bc <_printf_common+0x48>
 80063ae:	f104 0a19 	add.w	sl, r4, #25
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	6832      	ldr	r2, [r6, #0]
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dc26      	bgt.n	800640a <_printf_common+0x96>
 80063bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c0:	1e13      	subs	r3, r2, #0
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	0692      	lsls	r2, r2, #26
 80063ca:	d42b      	bmi.n	8006424 <_printf_common+0xb0>
 80063cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d01e      	beq.n	8006418 <_printf_common+0xa4>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	68e5      	ldr	r5, [r4, #12]
 80063de:	6832      	ldr	r2, [r6, #0]
 80063e0:	f003 0306 	and.w	r3, r3, #6
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	bf08      	it	eq
 80063e8:	1aad      	subeq	r5, r5, r2
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	bf0c      	ite	eq
 80063f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f4:	2500      	movne	r5, #0
 80063f6:	4293      	cmp	r3, r2
 80063f8:	bfc4      	itt	gt
 80063fa:	1a9b      	subgt	r3, r3, r2
 80063fc:	18ed      	addgt	r5, r5, r3
 80063fe:	2600      	movs	r6, #0
 8006400:	341a      	adds	r4, #26
 8006402:	42b5      	cmp	r5, r6
 8006404:	d11a      	bne.n	800643c <_printf_common+0xc8>
 8006406:	2000      	movs	r0, #0
 8006408:	e008      	b.n	800641c <_printf_common+0xa8>
 800640a:	2301      	movs	r3, #1
 800640c:	4652      	mov	r2, sl
 800640e:	4649      	mov	r1, r9
 8006410:	4638      	mov	r0, r7
 8006412:	47c0      	blx	r8
 8006414:	3001      	adds	r0, #1
 8006416:	d103      	bne.n	8006420 <_printf_common+0xac>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	3501      	adds	r5, #1
 8006422:	e7c6      	b.n	80063b2 <_printf_common+0x3e>
 8006424:	18e1      	adds	r1, r4, r3
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	2030      	movs	r0, #48	; 0x30
 800642a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800642e:	4422      	add	r2, r4
 8006430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006438:	3302      	adds	r3, #2
 800643a:	e7c7      	b.n	80063cc <_printf_common+0x58>
 800643c:	2301      	movs	r3, #1
 800643e:	4622      	mov	r2, r4
 8006440:	4649      	mov	r1, r9
 8006442:	4638      	mov	r0, r7
 8006444:	47c0      	blx	r8
 8006446:	3001      	adds	r0, #1
 8006448:	d0e6      	beq.n	8006418 <_printf_common+0xa4>
 800644a:	3601      	adds	r6, #1
 800644c:	e7d9      	b.n	8006402 <_printf_common+0x8e>
	...

08006450 <_printf_i>:
 8006450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006454:	7e0f      	ldrb	r7, [r1, #24]
 8006456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006458:	2f78      	cmp	r7, #120	; 0x78
 800645a:	4691      	mov	r9, r2
 800645c:	4680      	mov	r8, r0
 800645e:	460c      	mov	r4, r1
 8006460:	469a      	mov	sl, r3
 8006462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006466:	d807      	bhi.n	8006478 <_printf_i+0x28>
 8006468:	2f62      	cmp	r7, #98	; 0x62
 800646a:	d80a      	bhi.n	8006482 <_printf_i+0x32>
 800646c:	2f00      	cmp	r7, #0
 800646e:	f000 80d8 	beq.w	8006622 <_printf_i+0x1d2>
 8006472:	2f58      	cmp	r7, #88	; 0x58
 8006474:	f000 80a3 	beq.w	80065be <_printf_i+0x16e>
 8006478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800647c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006480:	e03a      	b.n	80064f8 <_printf_i+0xa8>
 8006482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006486:	2b15      	cmp	r3, #21
 8006488:	d8f6      	bhi.n	8006478 <_printf_i+0x28>
 800648a:	a101      	add	r1, pc, #4	; (adr r1, 8006490 <_printf_i+0x40>)
 800648c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064fd 	.word	0x080064fd
 8006498:	08006479 	.word	0x08006479
 800649c:	08006479 	.word	0x08006479
 80064a0:	08006479 	.word	0x08006479
 80064a4:	08006479 	.word	0x08006479
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	08006479 	.word	0x08006479
 80064b0:	08006479 	.word	0x08006479
 80064b4:	08006479 	.word	0x08006479
 80064b8:	08006479 	.word	0x08006479
 80064bc:	08006609 	.word	0x08006609
 80064c0:	0800652d 	.word	0x0800652d
 80064c4:	080065eb 	.word	0x080065eb
 80064c8:	08006479 	.word	0x08006479
 80064cc:	08006479 	.word	0x08006479
 80064d0:	0800662b 	.word	0x0800662b
 80064d4:	08006479 	.word	0x08006479
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	08006479 	.word	0x08006479
 80064e0:	08006479 	.word	0x08006479
 80064e4:	080065f3 	.word	0x080065f3
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	602a      	str	r2, [r5, #0]
 80064f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0a3      	b.n	8006644 <_printf_i+0x1f4>
 80064fc:	6820      	ldr	r0, [r4, #0]
 80064fe:	6829      	ldr	r1, [r5, #0]
 8006500:	0606      	lsls	r6, r0, #24
 8006502:	f101 0304 	add.w	r3, r1, #4
 8006506:	d50a      	bpl.n	800651e <_printf_i+0xce>
 8006508:	680e      	ldr	r6, [r1, #0]
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	2e00      	cmp	r6, #0
 800650e:	da03      	bge.n	8006518 <_printf_i+0xc8>
 8006510:	232d      	movs	r3, #45	; 0x2d
 8006512:	4276      	negs	r6, r6
 8006514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006518:	485e      	ldr	r0, [pc, #376]	; (8006694 <_printf_i+0x244>)
 800651a:	230a      	movs	r3, #10
 800651c:	e019      	b.n	8006552 <_printf_i+0x102>
 800651e:	680e      	ldr	r6, [r1, #0]
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006526:	bf18      	it	ne
 8006528:	b236      	sxthne	r6, r6
 800652a:	e7ef      	b.n	800650c <_printf_i+0xbc>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	1d19      	adds	r1, r3, #4
 8006532:	6029      	str	r1, [r5, #0]
 8006534:	0601      	lsls	r1, r0, #24
 8006536:	d501      	bpl.n	800653c <_printf_i+0xec>
 8006538:	681e      	ldr	r6, [r3, #0]
 800653a:	e002      	b.n	8006542 <_printf_i+0xf2>
 800653c:	0646      	lsls	r6, r0, #25
 800653e:	d5fb      	bpl.n	8006538 <_printf_i+0xe8>
 8006540:	881e      	ldrh	r6, [r3, #0]
 8006542:	4854      	ldr	r0, [pc, #336]	; (8006694 <_printf_i+0x244>)
 8006544:	2f6f      	cmp	r7, #111	; 0x6f
 8006546:	bf0c      	ite	eq
 8006548:	2308      	moveq	r3, #8
 800654a:	230a      	movne	r3, #10
 800654c:	2100      	movs	r1, #0
 800654e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006552:	6865      	ldr	r5, [r4, #4]
 8006554:	60a5      	str	r5, [r4, #8]
 8006556:	2d00      	cmp	r5, #0
 8006558:	bfa2      	ittt	ge
 800655a:	6821      	ldrge	r1, [r4, #0]
 800655c:	f021 0104 	bicge.w	r1, r1, #4
 8006560:	6021      	strge	r1, [r4, #0]
 8006562:	b90e      	cbnz	r6, 8006568 <_printf_i+0x118>
 8006564:	2d00      	cmp	r5, #0
 8006566:	d04d      	beq.n	8006604 <_printf_i+0x1b4>
 8006568:	4615      	mov	r5, r2
 800656a:	fbb6 f1f3 	udiv	r1, r6, r3
 800656e:	fb03 6711 	mls	r7, r3, r1, r6
 8006572:	5dc7      	ldrb	r7, [r0, r7]
 8006574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006578:	4637      	mov	r7, r6
 800657a:	42bb      	cmp	r3, r7
 800657c:	460e      	mov	r6, r1
 800657e:	d9f4      	bls.n	800656a <_printf_i+0x11a>
 8006580:	2b08      	cmp	r3, #8
 8006582:	d10b      	bne.n	800659c <_printf_i+0x14c>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	07de      	lsls	r6, r3, #31
 8006588:	d508      	bpl.n	800659c <_printf_i+0x14c>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	6861      	ldr	r1, [r4, #4]
 800658e:	4299      	cmp	r1, r3
 8006590:	bfde      	ittt	le
 8006592:	2330      	movle	r3, #48	; 0x30
 8006594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800659c:	1b52      	subs	r2, r2, r5
 800659e:	6122      	str	r2, [r4, #16]
 80065a0:	f8cd a000 	str.w	sl, [sp]
 80065a4:	464b      	mov	r3, r9
 80065a6:	aa03      	add	r2, sp, #12
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fee2 	bl	8006374 <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d14c      	bne.n	800664e <_printf_i+0x1fe>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b004      	add	sp, #16
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	4835      	ldr	r0, [pc, #212]	; (8006694 <_printf_i+0x244>)
 80065c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065c4:	6829      	ldr	r1, [r5, #0]
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80065cc:	6029      	str	r1, [r5, #0]
 80065ce:	061d      	lsls	r5, r3, #24
 80065d0:	d514      	bpl.n	80065fc <_printf_i+0x1ac>
 80065d2:	07df      	lsls	r7, r3, #31
 80065d4:	bf44      	itt	mi
 80065d6:	f043 0320 	orrmi.w	r3, r3, #32
 80065da:	6023      	strmi	r3, [r4, #0]
 80065dc:	b91e      	cbnz	r6, 80065e6 <_printf_i+0x196>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f023 0320 	bic.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	2310      	movs	r3, #16
 80065e8:	e7b0      	b.n	800654c <_printf_i+0xfc>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f043 0320 	orr.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2378      	movs	r3, #120	; 0x78
 80065f4:	4828      	ldr	r0, [pc, #160]	; (8006698 <_printf_i+0x248>)
 80065f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065fa:	e7e3      	b.n	80065c4 <_printf_i+0x174>
 80065fc:	0659      	lsls	r1, r3, #25
 80065fe:	bf48      	it	mi
 8006600:	b2b6      	uxthmi	r6, r6
 8006602:	e7e6      	b.n	80065d2 <_printf_i+0x182>
 8006604:	4615      	mov	r5, r2
 8006606:	e7bb      	b.n	8006580 <_printf_i+0x130>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	6826      	ldr	r6, [r4, #0]
 800660c:	6961      	ldr	r1, [r4, #20]
 800660e:	1d18      	adds	r0, r3, #4
 8006610:	6028      	str	r0, [r5, #0]
 8006612:	0635      	lsls	r5, r6, #24
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	d501      	bpl.n	800661c <_printf_i+0x1cc>
 8006618:	6019      	str	r1, [r3, #0]
 800661a:	e002      	b.n	8006622 <_printf_i+0x1d2>
 800661c:	0670      	lsls	r0, r6, #25
 800661e:	d5fb      	bpl.n	8006618 <_printf_i+0x1c8>
 8006620:	8019      	strh	r1, [r3, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	4615      	mov	r5, r2
 8006628:	e7ba      	b.n	80065a0 <_printf_i+0x150>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	602a      	str	r2, [r5, #0]
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	6862      	ldr	r2, [r4, #4]
 8006634:	2100      	movs	r1, #0
 8006636:	4628      	mov	r0, r5
 8006638:	f7f9 fdd2 	bl	80001e0 <memchr>
 800663c:	b108      	cbz	r0, 8006642 <_printf_i+0x1f2>
 800663e:	1b40      	subs	r0, r0, r5
 8006640:	6060      	str	r0, [r4, #4]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	2300      	movs	r3, #0
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664c:	e7a8      	b.n	80065a0 <_printf_i+0x150>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	462a      	mov	r2, r5
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	47d0      	blx	sl
 8006658:	3001      	adds	r0, #1
 800665a:	d0ab      	beq.n	80065b4 <_printf_i+0x164>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	d413      	bmi.n	800668a <_printf_i+0x23a>
 8006662:	68e0      	ldr	r0, [r4, #12]
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	4298      	cmp	r0, r3
 8006668:	bfb8      	it	lt
 800666a:	4618      	movlt	r0, r3
 800666c:	e7a4      	b.n	80065b8 <_printf_i+0x168>
 800666e:	2301      	movs	r3, #1
 8006670:	4632      	mov	r2, r6
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d09b      	beq.n	80065b4 <_printf_i+0x164>
 800667c:	3501      	adds	r5, #1
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	9903      	ldr	r1, [sp, #12]
 8006682:	1a5b      	subs	r3, r3, r1
 8006684:	42ab      	cmp	r3, r5
 8006686:	dcf2      	bgt.n	800666e <_printf_i+0x21e>
 8006688:	e7eb      	b.n	8006662 <_printf_i+0x212>
 800668a:	2500      	movs	r5, #0
 800668c:	f104 0619 	add.w	r6, r4, #25
 8006690:	e7f5      	b.n	800667e <_printf_i+0x22e>
 8006692:	bf00      	nop
 8006694:	08006a5d 	.word	0x08006a5d
 8006698:	08006a6e 	.word	0x08006a6e

0800669c <memmove>:
 800669c:	4288      	cmp	r0, r1
 800669e:	b510      	push	{r4, lr}
 80066a0:	eb01 0402 	add.w	r4, r1, r2
 80066a4:	d902      	bls.n	80066ac <memmove+0x10>
 80066a6:	4284      	cmp	r4, r0
 80066a8:	4623      	mov	r3, r4
 80066aa:	d807      	bhi.n	80066bc <memmove+0x20>
 80066ac:	1e43      	subs	r3, r0, #1
 80066ae:	42a1      	cmp	r1, r4
 80066b0:	d008      	beq.n	80066c4 <memmove+0x28>
 80066b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ba:	e7f8      	b.n	80066ae <memmove+0x12>
 80066bc:	4402      	add	r2, r0
 80066be:	4601      	mov	r1, r0
 80066c0:	428a      	cmp	r2, r1
 80066c2:	d100      	bne.n	80066c6 <memmove+0x2a>
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ce:	e7f7      	b.n	80066c0 <memmove+0x24>

080066d0 <_free_r>:
 80066d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066d2:	2900      	cmp	r1, #0
 80066d4:	d044      	beq.n	8006760 <_free_r+0x90>
 80066d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066da:	9001      	str	r0, [sp, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f1a1 0404 	sub.w	r4, r1, #4
 80066e2:	bfb8      	it	lt
 80066e4:	18e4      	addlt	r4, r4, r3
 80066e6:	f000 f913 	bl	8006910 <__malloc_lock>
 80066ea:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <_free_r+0x94>)
 80066ec:	9801      	ldr	r0, [sp, #4]
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	b933      	cbnz	r3, 8006700 <_free_r+0x30>
 80066f2:	6063      	str	r3, [r4, #4]
 80066f4:	6014      	str	r4, [r2, #0]
 80066f6:	b003      	add	sp, #12
 80066f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066fc:	f000 b90e 	b.w	800691c <__malloc_unlock>
 8006700:	42a3      	cmp	r3, r4
 8006702:	d908      	bls.n	8006716 <_free_r+0x46>
 8006704:	6825      	ldr	r5, [r4, #0]
 8006706:	1961      	adds	r1, r4, r5
 8006708:	428b      	cmp	r3, r1
 800670a:	bf01      	itttt	eq
 800670c:	6819      	ldreq	r1, [r3, #0]
 800670e:	685b      	ldreq	r3, [r3, #4]
 8006710:	1949      	addeq	r1, r1, r5
 8006712:	6021      	streq	r1, [r4, #0]
 8006714:	e7ed      	b.n	80066f2 <_free_r+0x22>
 8006716:	461a      	mov	r2, r3
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	b10b      	cbz	r3, 8006720 <_free_r+0x50>
 800671c:	42a3      	cmp	r3, r4
 800671e:	d9fa      	bls.n	8006716 <_free_r+0x46>
 8006720:	6811      	ldr	r1, [r2, #0]
 8006722:	1855      	adds	r5, r2, r1
 8006724:	42a5      	cmp	r5, r4
 8006726:	d10b      	bne.n	8006740 <_free_r+0x70>
 8006728:	6824      	ldr	r4, [r4, #0]
 800672a:	4421      	add	r1, r4
 800672c:	1854      	adds	r4, r2, r1
 800672e:	42a3      	cmp	r3, r4
 8006730:	6011      	str	r1, [r2, #0]
 8006732:	d1e0      	bne.n	80066f6 <_free_r+0x26>
 8006734:	681c      	ldr	r4, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	6053      	str	r3, [r2, #4]
 800673a:	4421      	add	r1, r4
 800673c:	6011      	str	r1, [r2, #0]
 800673e:	e7da      	b.n	80066f6 <_free_r+0x26>
 8006740:	d902      	bls.n	8006748 <_free_r+0x78>
 8006742:	230c      	movs	r3, #12
 8006744:	6003      	str	r3, [r0, #0]
 8006746:	e7d6      	b.n	80066f6 <_free_r+0x26>
 8006748:	6825      	ldr	r5, [r4, #0]
 800674a:	1961      	adds	r1, r4, r5
 800674c:	428b      	cmp	r3, r1
 800674e:	bf04      	itt	eq
 8006750:	6819      	ldreq	r1, [r3, #0]
 8006752:	685b      	ldreq	r3, [r3, #4]
 8006754:	6063      	str	r3, [r4, #4]
 8006756:	bf04      	itt	eq
 8006758:	1949      	addeq	r1, r1, r5
 800675a:	6021      	streq	r1, [r4, #0]
 800675c:	6054      	str	r4, [r2, #4]
 800675e:	e7ca      	b.n	80066f6 <_free_r+0x26>
 8006760:	b003      	add	sp, #12
 8006762:	bd30      	pop	{r4, r5, pc}
 8006764:	20004ab0 	.word	0x20004ab0

08006768 <sbrk_aligned>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	4e0e      	ldr	r6, [pc, #56]	; (80067a4 <sbrk_aligned+0x3c>)
 800676c:	460c      	mov	r4, r1
 800676e:	6831      	ldr	r1, [r6, #0]
 8006770:	4605      	mov	r5, r0
 8006772:	b911      	cbnz	r1, 800677a <sbrk_aligned+0x12>
 8006774:	f000 f8bc 	bl	80068f0 <_sbrk_r>
 8006778:	6030      	str	r0, [r6, #0]
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f000 f8b7 	bl	80068f0 <_sbrk_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	d00a      	beq.n	800679c <sbrk_aligned+0x34>
 8006786:	1cc4      	adds	r4, r0, #3
 8006788:	f024 0403 	bic.w	r4, r4, #3
 800678c:	42a0      	cmp	r0, r4
 800678e:	d007      	beq.n	80067a0 <sbrk_aligned+0x38>
 8006790:	1a21      	subs	r1, r4, r0
 8006792:	4628      	mov	r0, r5
 8006794:	f000 f8ac 	bl	80068f0 <_sbrk_r>
 8006798:	3001      	adds	r0, #1
 800679a:	d101      	bne.n	80067a0 <sbrk_aligned+0x38>
 800679c:	f04f 34ff 	mov.w	r4, #4294967295
 80067a0:	4620      	mov	r0, r4
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	20004ab4 	.word	0x20004ab4

080067a8 <_malloc_r>:
 80067a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ac:	1ccd      	adds	r5, r1, #3
 80067ae:	f025 0503 	bic.w	r5, r5, #3
 80067b2:	3508      	adds	r5, #8
 80067b4:	2d0c      	cmp	r5, #12
 80067b6:	bf38      	it	cc
 80067b8:	250c      	movcc	r5, #12
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	4607      	mov	r7, r0
 80067be:	db01      	blt.n	80067c4 <_malloc_r+0x1c>
 80067c0:	42a9      	cmp	r1, r5
 80067c2:	d905      	bls.n	80067d0 <_malloc_r+0x28>
 80067c4:	230c      	movs	r3, #12
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	2600      	movs	r6, #0
 80067ca:	4630      	mov	r0, r6
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d0:	4e2e      	ldr	r6, [pc, #184]	; (800688c <_malloc_r+0xe4>)
 80067d2:	f000 f89d 	bl	8006910 <__malloc_lock>
 80067d6:	6833      	ldr	r3, [r6, #0]
 80067d8:	461c      	mov	r4, r3
 80067da:	bb34      	cbnz	r4, 800682a <_malloc_r+0x82>
 80067dc:	4629      	mov	r1, r5
 80067de:	4638      	mov	r0, r7
 80067e0:	f7ff ffc2 	bl	8006768 <sbrk_aligned>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	4604      	mov	r4, r0
 80067e8:	d14d      	bne.n	8006886 <_malloc_r+0xde>
 80067ea:	6834      	ldr	r4, [r6, #0]
 80067ec:	4626      	mov	r6, r4
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d140      	bne.n	8006874 <_malloc_r+0xcc>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	4631      	mov	r1, r6
 80067f6:	4638      	mov	r0, r7
 80067f8:	eb04 0803 	add.w	r8, r4, r3
 80067fc:	f000 f878 	bl	80068f0 <_sbrk_r>
 8006800:	4580      	cmp	r8, r0
 8006802:	d13a      	bne.n	800687a <_malloc_r+0xd2>
 8006804:	6821      	ldr	r1, [r4, #0]
 8006806:	3503      	adds	r5, #3
 8006808:	1a6d      	subs	r5, r5, r1
 800680a:	f025 0503 	bic.w	r5, r5, #3
 800680e:	3508      	adds	r5, #8
 8006810:	2d0c      	cmp	r5, #12
 8006812:	bf38      	it	cc
 8006814:	250c      	movcc	r5, #12
 8006816:	4629      	mov	r1, r5
 8006818:	4638      	mov	r0, r7
 800681a:	f7ff ffa5 	bl	8006768 <sbrk_aligned>
 800681e:	3001      	adds	r0, #1
 8006820:	d02b      	beq.n	800687a <_malloc_r+0xd2>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	442b      	add	r3, r5
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	e00e      	b.n	8006848 <_malloc_r+0xa0>
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	1b52      	subs	r2, r2, r5
 800682e:	d41e      	bmi.n	800686e <_malloc_r+0xc6>
 8006830:	2a0b      	cmp	r2, #11
 8006832:	d916      	bls.n	8006862 <_malloc_r+0xba>
 8006834:	1961      	adds	r1, r4, r5
 8006836:	42a3      	cmp	r3, r4
 8006838:	6025      	str	r5, [r4, #0]
 800683a:	bf18      	it	ne
 800683c:	6059      	strne	r1, [r3, #4]
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	bf08      	it	eq
 8006842:	6031      	streq	r1, [r6, #0]
 8006844:	5162      	str	r2, [r4, r5]
 8006846:	604b      	str	r3, [r1, #4]
 8006848:	4638      	mov	r0, r7
 800684a:	f104 060b 	add.w	r6, r4, #11
 800684e:	f000 f865 	bl	800691c <__malloc_unlock>
 8006852:	f026 0607 	bic.w	r6, r6, #7
 8006856:	1d23      	adds	r3, r4, #4
 8006858:	1af2      	subs	r2, r6, r3
 800685a:	d0b6      	beq.n	80067ca <_malloc_r+0x22>
 800685c:	1b9b      	subs	r3, r3, r6
 800685e:	50a3      	str	r3, [r4, r2]
 8006860:	e7b3      	b.n	80067ca <_malloc_r+0x22>
 8006862:	6862      	ldr	r2, [r4, #4]
 8006864:	42a3      	cmp	r3, r4
 8006866:	bf0c      	ite	eq
 8006868:	6032      	streq	r2, [r6, #0]
 800686a:	605a      	strne	r2, [r3, #4]
 800686c:	e7ec      	b.n	8006848 <_malloc_r+0xa0>
 800686e:	4623      	mov	r3, r4
 8006870:	6864      	ldr	r4, [r4, #4]
 8006872:	e7b2      	b.n	80067da <_malloc_r+0x32>
 8006874:	4634      	mov	r4, r6
 8006876:	6876      	ldr	r6, [r6, #4]
 8006878:	e7b9      	b.n	80067ee <_malloc_r+0x46>
 800687a:	230c      	movs	r3, #12
 800687c:	603b      	str	r3, [r7, #0]
 800687e:	4638      	mov	r0, r7
 8006880:	f000 f84c 	bl	800691c <__malloc_unlock>
 8006884:	e7a1      	b.n	80067ca <_malloc_r+0x22>
 8006886:	6025      	str	r5, [r4, #0]
 8006888:	e7de      	b.n	8006848 <_malloc_r+0xa0>
 800688a:	bf00      	nop
 800688c:	20004ab0 	.word	0x20004ab0

08006890 <_realloc_r>:
 8006890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	4680      	mov	r8, r0
 8006896:	4614      	mov	r4, r2
 8006898:	460e      	mov	r6, r1
 800689a:	b921      	cbnz	r1, 80068a6 <_realloc_r+0x16>
 800689c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068a0:	4611      	mov	r1, r2
 80068a2:	f7ff bf81 	b.w	80067a8 <_malloc_r>
 80068a6:	b92a      	cbnz	r2, 80068b4 <_realloc_r+0x24>
 80068a8:	f7ff ff12 	bl	80066d0 <_free_r>
 80068ac:	4625      	mov	r5, r4
 80068ae:	4628      	mov	r0, r5
 80068b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b4:	f000 f838 	bl	8006928 <_malloc_usable_size_r>
 80068b8:	4284      	cmp	r4, r0
 80068ba:	4607      	mov	r7, r0
 80068bc:	d802      	bhi.n	80068c4 <_realloc_r+0x34>
 80068be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068c2:	d812      	bhi.n	80068ea <_realloc_r+0x5a>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4640      	mov	r0, r8
 80068c8:	f7ff ff6e 	bl	80067a8 <_malloc_r>
 80068cc:	4605      	mov	r5, r0
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d0ed      	beq.n	80068ae <_realloc_r+0x1e>
 80068d2:	42bc      	cmp	r4, r7
 80068d4:	4622      	mov	r2, r4
 80068d6:	4631      	mov	r1, r6
 80068d8:	bf28      	it	cs
 80068da:	463a      	movcs	r2, r7
 80068dc:	f7ff fbb8 	bl	8006050 <memcpy>
 80068e0:	4631      	mov	r1, r6
 80068e2:	4640      	mov	r0, r8
 80068e4:	f7ff fef4 	bl	80066d0 <_free_r>
 80068e8:	e7e1      	b.n	80068ae <_realloc_r+0x1e>
 80068ea:	4635      	mov	r5, r6
 80068ec:	e7df      	b.n	80068ae <_realloc_r+0x1e>
	...

080068f0 <_sbrk_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4d06      	ldr	r5, [pc, #24]	; (800690c <_sbrk_r+0x1c>)
 80068f4:	2300      	movs	r3, #0
 80068f6:	4604      	mov	r4, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	f7fa f938 	bl	8000b70 <_sbrk>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_sbrk_r+0x1a>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_sbrk_r+0x1a>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	20004ab8 	.word	0x20004ab8

08006910 <__malloc_lock>:
 8006910:	4801      	ldr	r0, [pc, #4]	; (8006918 <__malloc_lock+0x8>)
 8006912:	f000 b811 	b.w	8006938 <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20004abc 	.word	0x20004abc

0800691c <__malloc_unlock>:
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <__malloc_unlock+0x8>)
 800691e:	f000 b80c 	b.w	800693a <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20004abc 	.word	0x20004abc

08006928 <_malloc_usable_size_r>:
 8006928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800692c:	1f18      	subs	r0, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfbc      	itt	lt
 8006932:	580b      	ldrlt	r3, [r1, r0]
 8006934:	18c0      	addlt	r0, r0, r3
 8006936:	4770      	bx	lr

08006938 <__retarget_lock_acquire_recursive>:
 8006938:	4770      	bx	lr

0800693a <__retarget_lock_release_recursive>:
 800693a:	4770      	bx	lr

0800693c <_init>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	bf00      	nop
 8006940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006942:	bc08      	pop	{r3}
 8006944:	469e      	mov	lr, r3
 8006946:	4770      	bx	lr

08006948 <_fini>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr
